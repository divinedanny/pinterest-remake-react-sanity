{"ast":null,"code":"import { getIt } from 'get-it';\nexport { adapter as unstable__adapter, environment as unstable__environment } from 'get-it';\nimport { jsonRequest, jsonResponse, progress, observable } from 'get-it/middleware';\nimport { Observable, lastValueFrom } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nvar envMiddleware = [];\nconst MAX_ITEMS_IN_ERROR_MESSAGE = 5;\nclass ClientError extends Error {\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message);\n    this.statusCode = 400;\n    Object.assign(this, props);\n  }\n}\nclass ServerError extends Error {\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message);\n    this.statusCode = 500;\n    Object.assign(this, props);\n  }\n}\nfunction extractErrorProps(res) {\n  const body = res.body;\n  const props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res),\n    message: \"\",\n    details: void 0\n  };\n  if (body.error && body.message) {\n    props.message = \"\".concat(body.error, \" - \").concat(body.message);\n    return props;\n  }\n  if (isMutationError(body)) {\n    const allItems = body.error.items || [];\n    const items = allItems.slice(0, MAX_ITEMS_IN_ERROR_MESSAGE).map(item => {\n      var _a;\n      return (_a = item.error) == null ? void 0 : _a.description;\n    }).filter(Boolean);\n    let itemsStr = items.length ? \":\\n- \".concat(items.join(\"\\n- \")) : \"\";\n    if (allItems.length > MAX_ITEMS_IN_ERROR_MESSAGE) {\n      itemsStr += \"\\n...and \".concat(allItems.length - MAX_ITEMS_IN_ERROR_MESSAGE, \" more\");\n    }\n    props.message = \"\".concat(body.error.description).concat(itemsStr);\n    props.details = body.error;\n    return props;\n  }\n  if (body.error && body.error.description) {\n    props.message = body.error.description;\n    props.details = body.error;\n    return props;\n  }\n  props.message = body.error || body.message || httpErrorMessage(res);\n  return props;\n}\nfunction isMutationError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description === \"string\";\n}\nfunction isPlainObject(obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n  const statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : \"\";\n  return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n  const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n  const isJson = contentType.indexOf(\"application/json\") !== -1;\n  return isJson ? JSON.stringify(body, null, 2) : body;\n}\nconst httpError = {\n  onResponse: res => {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n    return res;\n  }\n};\nconst printWarnings = {\n  onResponse: res => {\n    const warn = res.headers[\"x-sanity-warning\"];\n    const warnings = Array.isArray(warn) ? warn : [warn];\n    warnings.filter(Boolean).forEach(msg => console.warn(msg));\n    return res;\n  }\n};\nfunction defineHttpRequest(envMiddleware) {\n  const request = getIt([...envMiddleware, printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({\n    implementation: Observable\n  })]);\n  function httpRequest(options) {\n    let requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n    return requester({\n      maxRedirects: 0,\n      ...options\n    });\n  }\n  httpRequest.defaultRequester = request;\n  return httpRequest;\n}\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config) {\n  let overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const headers = {};\n  const token = overrides.token || config.token;\n  if (token) {\n    headers.Authorization = \"Bearer \".concat(token);\n  }\n  if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {\n    headers[projectHeader] = config.projectId;\n  }\n  const withCredentials = Boolean(typeof overrides.withCredentials === \"undefined\" ? config.token || config.withCredentials : overrides.withCredentials);\n  const timeout = typeof overrides.timeout === \"undefined\" ? config.timeout : overrides.timeout;\n  return Object.assign({}, overrides, {\n    headers: Object.assign({}, headers, overrides.headers || {}),\n    timeout: typeof timeout === \"undefined\" ? 5 * 60 * 1e3 : timeout,\n    proxy: overrides.proxy || config.proxy,\n    json: true,\n    withCredentials\n  });\n}\nfunction getSelection(sel) {\n  if (typeof sel === \"string\" || Array.isArray(sel)) {\n    return {\n      id: sel\n    };\n  }\n  if (typeof sel === \"object\" && sel !== null && \"query\" in sel && typeof sel.query === \"string\") {\n    return \"params\" in sel && typeof sel.params === \"object\" && sel.params !== null ? {\n      query: sel.query,\n      params: sel.params\n    } : {\n      query: sel.query\n    };\n  }\n  const selectionOpts = [\"* Document ID (<docId>)\", \"* Array of document IDs\", \"* Object containing `query`\"].join(\"\\n\");\n  throw new Error(\"Unknown selection - must be one of:\\n\\n\".concat(selectionOpts));\n}\nconst VALID_ASSET_TYPES = [\"image\", \"file\"];\nconst VALID_INSERT_LOCATIONS = [\"before\", \"after\", \"replace\"];\nconst dataset = name => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n    throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n  }\n};\nconst projectId = id => {\n  if (!/^[-a-z0-9]+$/i.test(id)) {\n    throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n  }\n};\nconst validateAssetType = type => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n    throw new Error(\"Invalid asset type: \".concat(type, \". Must be one of \").concat(VALID_ASSET_TYPES.join(\", \")));\n  }\n};\nconst validateObject = (op, val) => {\n  if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n    throw new Error(\"\".concat(op, \"() takes an object of properties\"));\n  }\n};\nconst validateDocumentId = (op, id) => {\n  if (typeof id !== \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) {\n    throw new Error(\"\".concat(op, \"(): \\\"\").concat(id, \"\\\" is not a valid document ID\"));\n  }\n};\nconst requireDocumentId = (op, doc) => {\n  if (!doc._id) {\n    throw new Error(\"\".concat(op, \"() requires that the document contains an ID (\\\"_id\\\" property)\"));\n  }\n  validateDocumentId(op, doc._id);\n};\nconst validateInsert = (at, selector, items) => {\n  const signature = \"insert(at, selector, items)\";\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map(loc => \"\\\"\".concat(loc, \"\\\"\")).join(\", \");\n    throw new Error(\"\".concat(signature, \" takes an \\\"at\\\"-argument which is one of: \").concat(valid));\n  }\n  if (typeof selector !== \"string\") {\n    throw new Error(\"\".concat(signature, \" takes a \\\"selector\\\"-argument which must be a string\"));\n  }\n  if (!Array.isArray(items)) {\n    throw new Error(\"\".concat(signature, \" takes an \\\"items\\\"-argument which must be an array\"));\n  }\n};\nconst hasDataset = config => {\n  if (!config.dataset) {\n    throw new Error(\"`dataset` must be provided to perform queries\");\n  }\n  return config.dataset || \"\";\n};\nconst requestTag = tag => {\n  if (typeof tag !== \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n    throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n  }\n  return tag;\n};\nconst encodeQueryString = _ref => {\n  let {\n    query,\n    params = {},\n    options = {}\n  } = _ref;\n  const searchParams = new URLSearchParams();\n  const {\n    tag,\n    ...opts\n  } = options;\n  if (tag) searchParams.set(\"tag\", tag);\n  searchParams.set(\"query\", query);\n  for (const [key, value] of Object.entries(params)) {\n    searchParams.set(\"$\".concat(key), JSON.stringify(value));\n  }\n  for (const [key, value] of Object.entries(opts)) {\n    if (value) searchParams.set(key, \"\".concat(value));\n  }\n  return \"?\".concat(searchParams);\n};\nvar __accessCheck$6 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$6 = (obj, member, getter) => {\n  __accessCheck$6(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$6 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$6 = (obj, member, value, setter) => {\n  __accessCheck$6(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$5, _client2$5;\nclass BasePatch {\n  constructor(selection) {\n    let operations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.selection = selection;\n    this.operations = operations;\n  }\n  /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  set(attrs) {\n    return this._assign(\"set\", attrs);\n  }\n  /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  setIfMissing(attrs) {\n    return this._assign(\"setIfMissing\", attrs);\n  }\n  /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */\n  diffMatchPatch(attrs) {\n    validateObject(\"diffMatchPatch\", attrs);\n    return this._assign(\"diffMatchPatch\", attrs);\n  }\n  /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */\n  unset(attrs) {\n    if (!Array.isArray(attrs)) {\n      throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n    }\n    this.operations = Object.assign({}, this.operations, {\n      unset: attrs\n    });\n    return this;\n  }\n  /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */\n  inc(attrs) {\n    return this._assign(\"inc\", attrs);\n  }\n  /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */\n  dec(attrs) {\n    return this._assign(\"dec\", attrs);\n  }\n  /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */\n  insert(at, selector, items) {\n    validateInsert(at, selector, items);\n    return this._assign(\"insert\", {\n      [at]: selector,\n      items\n    });\n  }\n  /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */\n  append(selector, items) {\n    return this.insert(\"after\", \"\".concat(selector, \"[-1]\"), items);\n  }\n  /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */\n  prepend(selector, items) {\n    return this.insert(\"before\", \"\".concat(selector, \"[0]\"), items);\n  }\n  /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */\n  splice(selector, start, deleteCount, items) {\n    const delAll = typeof deleteCount === \"undefined\" || deleteCount === -1;\n    const startIndex = start < 0 ? start - 1 : start;\n    const delCount = delAll ? -1 : Math.max(0, start + deleteCount);\n    const delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount;\n    const rangeSelector = \"\".concat(selector, \"[\").concat(startIndex, \":\").concat(delRange, \"]\");\n    return this.insert(\"replace\", rangeSelector, items || []);\n  }\n  /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */\n  ifRevisionId(rev) {\n    this.operations.ifRevisionID = rev;\n    return this;\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  serialize() {\n    return {\n      ...getSelection(this.selection),\n      ...this.operations\n    };\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the patch of all operations\n   */\n  reset() {\n    this.operations = {};\n    return this;\n  }\n  _assign(op, props) {\n    let merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    validateObject(op, props);\n    this.operations = Object.assign({}, this.operations, {\n      [op]: Object.assign({}, merge && this.operations[op] || {}, props)\n    });\n    return this;\n  }\n  _set(op, props) {\n    return this._assign(op, props, false);\n  }\n}\nconst _ObservablePatch = class extends BasePatch {\n  constructor(selection, operations, client) {\n    super(selection, operations);\n    __privateAdd$6(this, _client$5, void 0);\n    __privateSet$6(this, _client$5, client);\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new _ObservablePatch(this.selection, {\n      ...this.operations\n    }, __privateGet$6(this, _client$5));\n  }\n  commit(options) {\n    if (!__privateGet$6(this, _client$5)) {\n      throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n    }\n    const returnFirst = typeof this.selection === \"string\";\n    const opts = Object.assign({\n      returnFirst,\n      returnDocuments: true\n    }, options);\n    return __privateGet$6(this, _client$5).mutate({\n      patch: this.serialize()\n    }, opts);\n  }\n};\nlet ObservablePatch = _ObservablePatch;\n_client$5 = new WeakMap();\nconst _Patch = class extends BasePatch {\n  constructor(selection, operations, client) {\n    super(selection, operations);\n    __privateAdd$6(this, _client2$5, void 0);\n    __privateSet$6(this, _client2$5, client);\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new _Patch(this.selection, {\n      ...this.operations\n    }, __privateGet$6(this, _client2$5));\n  }\n  commit(options) {\n    if (!__privateGet$6(this, _client2$5)) {\n      throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n    }\n    const returnFirst = typeof this.selection === \"string\";\n    const opts = Object.assign({\n      returnFirst,\n      returnDocuments: true\n    }, options);\n    return __privateGet$6(this, _client2$5).mutate({\n      patch: this.serialize()\n    }, opts);\n  }\n};\nlet Patch = _Patch;\n_client2$5 = new WeakMap();\nvar __accessCheck$5 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$5 = (obj, member, getter) => {\n  __accessCheck$5(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$5 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$5 = (obj, member, value, setter) => {\n  __accessCheck$5(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$4, _client2$4;\nconst defaultMutateOptions = {\n  returnDocuments: false\n};\nclass BaseTransaction {\n  constructor() {\n    let operations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let transactionId = arguments.length > 1 ? arguments[1] : undefined;\n    this.operations = operations;\n    this.trxId = transactionId;\n  }\n  /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */\n  create(doc) {\n    validateObject(\"create\", doc);\n    return this._add({\n      create: doc\n    });\n  }\n  /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */\n  createIfNotExists(doc) {\n    const op = \"createIfNotExists\";\n    validateObject(op, doc);\n    requireDocumentId(op, doc);\n    return this._add({\n      [op]: doc\n    });\n  }\n  /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */\n  createOrReplace(doc) {\n    const op = \"createOrReplace\";\n    validateObject(op, doc);\n    requireDocumentId(op, doc);\n    return this._add({\n      [op]: doc\n    });\n  }\n  /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */\n  delete(documentId) {\n    validateDocumentId(\"delete\", documentId);\n    return this._add({\n      delete: {\n        id: documentId\n      }\n    });\n  }\n  transactionId(id) {\n    if (!id) {\n      return this.trxId;\n    }\n    this.trxId = id;\n    return this;\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  serialize() {\n    return [...this.operations];\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the transaction of all operations\n   */\n  reset() {\n    this.operations = [];\n    return this;\n  }\n  _add(mut) {\n    this.operations.push(mut);\n    return this;\n  }\n}\nconst _Transaction = class extends BaseTransaction {\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId);\n    __privateAdd$5(this, _client$4, void 0);\n    __privateSet$5(this, _client$4, client);\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new _Transaction([...this.operations], __privateGet$5(this, _client$4), this.trxId);\n  }\n  commit(options) {\n    if (!__privateGet$5(this, _client$4)) {\n      throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n    }\n    return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({\n      transactionId: this.trxId\n    }, defaultMutateOptions, options || {}));\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps === \"function\";\n    const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof Patch;\n    if (isPatch) {\n      return this._add({\n        patch: patchOrDocumentId.serialize()\n      });\n    }\n    if (isBuilder) {\n      const patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));\n      if (!(patch instanceof Patch)) {\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      }\n      return this._add({\n        patch: patch.serialize()\n      });\n    }\n    return this._add({\n      patch: {\n        id: patchOrDocumentId,\n        ...patchOps\n      }\n    });\n  }\n};\nlet Transaction = _Transaction;\n_client$4 = new WeakMap();\nconst _ObservableTransaction = class extends BaseTransaction {\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId);\n    __privateAdd$5(this, _client2$4, void 0);\n    __privateSet$5(this, _client2$4, client);\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new _ObservableTransaction([...this.operations], __privateGet$5(this, _client2$4), this.trxId);\n  }\n  commit(options) {\n    if (!__privateGet$5(this, _client2$4)) {\n      throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n    }\n    return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({\n      transactionId: this.trxId\n    }, defaultMutateOptions, options || {}));\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps === \"function\";\n    const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof ObservablePatch;\n    if (isPatch) {\n      return this._add({\n        patch: patchOrDocumentId.serialize()\n      });\n    }\n    if (isBuilder) {\n      const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));\n      if (!(patch instanceof ObservablePatch)) {\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      }\n      return this._add({\n        patch: patch.serialize()\n      });\n    }\n    return this._add({\n      patch: {\n        id: patchOrDocumentId,\n        ...patchOps\n      }\n    });\n  }\n};\nlet ObservableTransaction = _ObservableTransaction;\n_client2$4 = new WeakMap();\nconst excludeFalsey = (param, defValue) => {\n  const value = typeof param === \"undefined\" ? defValue : param;\n  return param === false ? void 0 : value;\n};\nconst getMutationQuery = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    dryRun: options.dryRun,\n    returnIds: true,\n    returnDocuments: excludeFalsey(options.returnDocuments, true),\n    visibility: options.visibility || \"sync\",\n    autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n    skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n  };\n};\nconst isResponse = event => event.type === \"response\";\nconst getBody = event => event.body;\nconst indexBy = (docs, attr) => docs.reduce((indexed, doc) => {\n  indexed[attr(doc)] = doc;\n  return indexed;\n}, /* @__PURE__ */Object.create(null));\nconst getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, query, params) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const mapResponse = options.filterResponse === false ? res => res : res => res.result;\n  return _dataRequest(client, httpRequest, \"query\", {\n    query,\n    params\n  }, options).pipe(map(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const options = {\n    uri: _getDataUrl(client, \"doc\", id),\n    json: true,\n    tag: opts.tag\n  };\n  return _requestObservable(client, httpRequest, options).pipe(filter(isResponse), map(event => event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const options = {\n    uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n    json: true,\n    tag: opts.tag\n  };\n  return _requestObservable(client, httpRequest, options).pipe(filter(isResponse), map(event => {\n    const indexed = indexBy(event.body.documents || [], doc => doc._id);\n    return ids.map(id => indexed[id] || null);\n  }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n  requireDocumentId(\"createIfNotExists\", doc);\n  return _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n  requireDocumentId(\"createOrReplace\", doc);\n  return _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n  return _dataRequest(client, httpRequest, \"mutate\", {\n    mutations: [{\n      delete: getSelection(selection)\n    }]\n  }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n  let mut;\n  if (mutations instanceof Patch || mutations instanceof ObservablePatch) {\n    mut = {\n      patch: mutations.serialize()\n    };\n  } else if (mutations instanceof Transaction || mutations instanceof ObservableTransaction) {\n    mut = mutations.serialize();\n  } else {\n    mut = mutations;\n  }\n  const muts = Array.isArray(mut) ? mut : [mut];\n  const transactionId = options && options.transactionId || void 0;\n  return _dataRequest(client, httpRequest, \"mutate\", {\n    mutations: muts,\n    transactionId\n  }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const isMutation = endpoint === \"mutate\";\n  const isQuery = endpoint === \"query\";\n  const strQuery = isMutation ? \"\" : encodeQueryString(body);\n  const useGet = !isMutation && strQuery.length < getQuerySizeLimit;\n  const stringQuery = useGet ? strQuery : \"\";\n  const returnFirst = options.returnFirst;\n  const {\n    timeout,\n    token,\n    tag,\n    headers\n  } = options;\n  const uri = _getDataUrl(client, endpoint, stringQuery);\n  const reqOptions = {\n    method: useGet ? \"GET\" : \"POST\",\n    uri,\n    json: true,\n    body: useGet ? void 0 : body,\n    query: isMutation && getMutationQuery(options),\n    timeout,\n    headers,\n    token,\n    tag,\n    canUseCdn: isQuery,\n    signal: options.signal\n  };\n  return _requestObservable(client, httpRequest, reqOptions).pipe(filter(isResponse), map(getBody), map(res => {\n    if (!isMutation) {\n      return res;\n    }\n    const results = res.results || [];\n    if (options.returnDocuments) {\n      return returnFirst ? results[0] && results[0].document : results.map(mut => mut.document);\n    }\n    const key = returnFirst ? \"documentId\" : \"documentIds\";\n    const ids = returnFirst ? results[0] && results[0].id : results.map(mut => mut.id);\n    return {\n      transactionId: res.transactionId,\n      results,\n      [key]: ids\n    };\n  }));\n}\nfunction _create(client, httpRequest, doc, op) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const mutation = {\n    [op]: doc\n  };\n  const opts = Object.assign({\n    returnFirst: true,\n    returnDocuments: true\n  }, options);\n  return _dataRequest(client, httpRequest, \"mutate\", {\n    mutations: [mutation]\n  }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n  const uri = options.url || options.uri;\n  const config = client.config();\n  const canUseCdn = typeof options.canUseCdn === \"undefined\" ? [\"GET\", \"HEAD\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n  const useCdn = config.useCdn && canUseCdn;\n  const tag = options.tag && config.requestTagPrefix ? [config.requestTagPrefix, options.tag].join(\".\") : options.tag || config.requestTagPrefix;\n  if (tag) {\n    options.query = {\n      tag: requestTag(tag),\n      ...options.query\n    };\n  }\n  const reqOptions = requestOptions(config, Object.assign({}, options, {\n    url: _getUrl(client, uri, useCdn)\n  }));\n  const request = new Observable(subscriber =>\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- the typings thinks it's optional because it's not required to specify it when calling createClient, but it's always defined in practice since SanityClient provides a default\n  httpRequest(reqOptions, config.requester).subscribe(subscriber));\n  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n  const observable = _requestObservable(client, httpRequest, options).pipe(filter(event => event.type === \"response\"), map(event => event.body));\n  return observable;\n}\nfunction _getDataUrl(client, operation, path) {\n  const config = client.config();\n  const catalog = hasDataset(config);\n  const baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n  const uri = path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri;\n  return \"/data\".concat(uri).replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri) {\n  let canUseCdn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const {\n    url,\n    cdnUrl\n  } = client.config();\n  const base = canUseCdn ? cdnUrl : url;\n  return \"\".concat(base, \"/\").concat(uri.replace(/^\\//, \"\"));\n}\nfunction _withAbortSignal(signal) {\n  return input => {\n    return new Observable(observer => {\n      const abort = () => observer.error(_createAbortError(signal));\n      if (signal && signal.aborted) {\n        abort();\n        return;\n      }\n      const subscription = input.subscribe(observer);\n      signal.addEventListener(\"abort\", abort);\n      return () => {\n        signal.removeEventListener(\"abort\", abort);\n        subscription.unsubscribe();\n      };\n    });\n  };\n}\nconst isDomExceptionSupported = Boolean(globalThis.DOMException);\nfunction _createAbortError(signal) {\n  var _a, _b;\n  if (isDomExceptionSupported) {\n    return new DOMException((_a = signal == null ? void 0 : signal.reason) != null ? _a : \"The operation was aborted.\", \"AbortError\");\n  }\n  const error = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : \"The operation was aborted.\");\n  error.name = \"AbortError\";\n  return error;\n}\nvar __accessCheck$4 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$4 = (obj, member, getter) => {\n  __accessCheck$4(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$4 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$4 = (obj, member, value, setter) => {\n  __accessCheck$4(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$3, _httpRequest$4, _client2$3, _httpRequest2$4;\nclass ObservableAssetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$4(this, _client$3, void 0);\n    __privateAdd$4(this, _httpRequest$4, void 0);\n    __privateSet$4(this, _client$3, client);\n    __privateSet$4(this, _httpRequest$4, httpRequest);\n  }\n  upload(assetType, body, options) {\n    return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);\n  }\n}\n_client$3 = new WeakMap();\n_httpRequest$4 = new WeakMap();\nclass AssetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$4(this, _client2$3, void 0);\n    __privateAdd$4(this, _httpRequest2$4, void 0);\n    __privateSet$4(this, _client2$3, client);\n    __privateSet$4(this, _httpRequest2$4, httpRequest);\n  }\n  upload(assetType, body, options) {\n    const observable = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);\n    return lastValueFrom(observable.pipe(filter(event => event.type === \"response\"), map(event => event.body.document)));\n  }\n}\n_client2$3 = new WeakMap();\n_httpRequest2$4 = new WeakMap();\nfunction _upload(client, httpRequest, assetType, body) {\n  let opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  validateAssetType(assetType);\n  let meta = opts.extract || void 0;\n  if (meta && !meta.length) {\n    meta = [\"none\"];\n  }\n  const dataset = hasDataset(client.config());\n  const assetEndpoint = assetType === \"image\" ? \"images\" : \"files\";\n  const options = optionsFromFile(opts, body);\n  const {\n    tag,\n    label,\n    title,\n    description,\n    creditLine,\n    filename,\n    source\n  } = options;\n  const query = {\n    label,\n    title,\n    description,\n    filename,\n    meta,\n    creditLine\n  };\n  if (source) {\n    query.sourceId = source.id;\n    query.sourceName = source.name;\n    query.sourceUrl = source.url;\n  }\n  return _requestObservable(client, httpRequest, {\n    tag,\n    method: \"POST\",\n    timeout: options.timeout || 0,\n    uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n    headers: options.contentType ? {\n      \"Content-Type\": options.contentType\n    } : {},\n    query,\n    body\n  });\n}\nfunction optionsFromFile(opts, file) {\n  if (typeof File === \"undefined\" || !(file instanceof File)) {\n    return opts;\n  }\n  return Object.assign({\n    filename: opts.preserveFilename === false ? void 0 : file.name,\n    contentType: file.type\n  }, opts);\n}\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nfunction once(fn) {\n  let didCall = false;\n  let returnValue;\n  return function () {\n    if (didCall) {\n      return returnValue;\n    }\n    returnValue = fn(...arguments);\n    didCall = true;\n    return returnValue;\n  };\n}\nconst createWarningPrinter = message =>\n// eslint-disable-next-line no-console\nonce(function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return console.warn(message.join(\" \"), ...args);\n});\nconst printCdnWarning = createWarningPrinter([\"You are not using the Sanity CDN. That means your data is always fresh, but the CDN is faster and\", \"cheaper. Think about it! For more info, see \".concat(generateHelpUrl(\"js-client-cdn-configuration\"), \" \"), \"To hide this warning, please set the `useCdn` option to either `true` or `false` when creating\", \"the client.\"]);\nconst printBrowserTokenWarning = createWarningPrinter([\"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\", \"See \".concat(generateHelpUrl(\"js-client-browser-token\"), \" for more information and how to hide this warning.\")]);\nconst printNoApiVersionSpecifiedWarning = createWarningPrinter([\"Using the Sanity client without specifying an API version is deprecated.\", \"See \".concat(generateHelpUrl(\"js-client-api-version\"))]);\nconst printNoDefaultExport = createWarningPrinter([\"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead\"]);\nconst defaultCdnHost = \"apicdn.sanity.io\";\nconst defaultConfig = {\n  apiHost: \"https://api.sanity.io\",\n  apiVersion: \"1\",\n  useProjectHostname: true\n};\nconst LOCALHOSTS = [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"];\nconst isLocal = host => LOCALHOSTS.indexOf(host) !== -1;\nconst validateApiVersion = function validateApiVersion2(apiVersion) {\n  if (apiVersion === \"1\" || apiVersion === \"X\") {\n    return;\n  }\n  const apiDate = new Date(apiVersion);\n  const apiVersionValid = /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0;\n  if (!apiVersionValid) {\n    throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n  }\n};\nconst initConfig = (config, prevConfig) => {\n  const specifiedConfig = Object.assign({}, prevConfig, config);\n  if (!specifiedConfig.apiVersion) {\n    printNoApiVersionSpecifiedWarning();\n  }\n  const newConfig = Object.assign({}, defaultConfig, specifiedConfig);\n  const projectBased = newConfig.useProjectHostname;\n  if (typeof Promise === \"undefined\") {\n    const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n    throw new Error(\"No native Promise-implementation found, polyfill needed - see \".concat(helpUrl));\n  }\n  if (projectBased && !newConfig.projectId) {\n    throw new Error(\"Configuration must contain `projectId`\");\n  }\n  const isBrowser = typeof window !== \"undefined\" && window.location && window.location.hostname;\n  const isLocalhost = isBrowser && isLocal(window.location.hostname);\n  if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {\n    printBrowserTokenWarning();\n  } else if (typeof newConfig.useCdn === \"undefined\") {\n    printCdnWarning();\n  }\n  if (projectBased) {\n    projectId(newConfig.projectId);\n  }\n  if (newConfig.dataset) {\n    dataset(newConfig.dataset);\n  }\n  if (\"requestTagPrefix\" in newConfig) {\n    newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0;\n  }\n  newConfig.apiVersion = \"\".concat(newConfig.apiVersion).replace(/^v/, \"\");\n  newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost;\n  newConfig.useCdn = Boolean(newConfig.useCdn) && !newConfig.withCredentials;\n  validateApiVersion(newConfig.apiVersion);\n  const hostParts = newConfig.apiHost.split(\"://\", 2);\n  const protocol = hostParts[0];\n  const host = hostParts[1];\n  const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n  if (newConfig.useProjectHostname) {\n    newConfig.url = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(host, \"/v\").concat(newConfig.apiVersion);\n    newConfig.cdnUrl = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(cdnHost, \"/v\").concat(newConfig.apiVersion);\n  } else {\n    newConfig.url = \"\".concat(newConfig.apiHost, \"/v\").concat(newConfig.apiVersion);\n    newConfig.cdnUrl = newConfig.url;\n  }\n  return newConfig;\n};\nvar defaults = (obj, defaults) => Object.keys(defaults).concat(Object.keys(obj)).reduce((target, prop) => {\n  target[prop] = typeof obj[prop] === \"undefined\" ? defaults[prop] : obj[prop];\n  return target;\n}, {});\nconst pick = (obj, props) => props.reduce((selection, prop) => {\n  if (typeof obj[prop] === \"undefined\") {\n    return selection;\n  }\n  selection[prop] = obj[prop];\n  return selection;\n}, {});\nconst MAX_URL_LENGTH = 16e3 - 1200;\nconst possibleOptions = [\"includePreviousRevision\", \"includeResult\", \"visibility\", \"effectFormat\", \"tag\"];\nconst defaultOptions = {\n  includeResult: true\n};\nfunction _listen(query, params) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    url,\n    token,\n    withCredentials,\n    requestTagPrefix\n  } = this.config();\n  const tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(\".\") : opts.tag;\n  const options = {\n    ...defaults(opts, defaultOptions),\n    tag\n  };\n  const listenOpts = pick(options, possibleOptions);\n  const qs = encodeQueryString({\n    query,\n    params,\n    options: {\n      tag,\n      ...listenOpts\n    }\n  });\n  const uri = \"\".concat(url).concat(_getDataUrl(this, \"listen\", qs));\n  if (uri.length > MAX_URL_LENGTH) {\n    return new Observable(observer => observer.error(new Error(\"Query too large for listener\")));\n  }\n  const listenFor = options.events ? options.events : [\"mutation\"];\n  const shouldEmitReconnect = listenFor.indexOf(\"reconnect\") !== -1;\n  const esOptions = {};\n  if (token || withCredentials) {\n    esOptions.withCredentials = true;\n  }\n  if (token) {\n    esOptions.headers = {\n      Authorization: \"Bearer \".concat(token)\n    };\n  }\n  return new Observable(observer => {\n    let es;\n    getEventSource().then(eventSource => {\n      es = eventSource;\n    }).catch(reason => {\n      observer.error(reason);\n      stop();\n    });\n    let reconnectTimer;\n    let stopped = false;\n    function onError() {\n      if (stopped) {\n        return;\n      }\n      emitReconnect();\n      if (stopped) {\n        return;\n      }\n      if (es.readyState === es.CLOSED) {\n        unsubscribe();\n        clearTimeout(reconnectTimer);\n        reconnectTimer = setTimeout(open, 100);\n      }\n    }\n    function onChannelError(err) {\n      observer.error(cooerceError(err));\n    }\n    function onMessage(evt) {\n      const event = parseEvent(evt);\n      return event instanceof Error ? observer.error(event) : observer.next(event);\n    }\n    function onDisconnect() {\n      stopped = true;\n      unsubscribe();\n      observer.complete();\n    }\n    function unsubscribe() {\n      if (!es) return;\n      es.removeEventListener(\"error\", onError);\n      es.removeEventListener(\"channelError\", onChannelError);\n      es.removeEventListener(\"disconnect\", onDisconnect);\n      listenFor.forEach(type => es.removeEventListener(type, onMessage));\n      es.close();\n    }\n    function emitReconnect() {\n      if (shouldEmitReconnect) {\n        observer.next({\n          type: \"reconnect\"\n        });\n      }\n    }\n    async function getEventSource() {\n      const {\n        default: EventSource\n      } = await import('@sanity/eventsource');\n      const evs = new EventSource(uri, esOptions);\n      evs.addEventListener(\"error\", onError);\n      evs.addEventListener(\"channelError\", onChannelError);\n      evs.addEventListener(\"disconnect\", onDisconnect);\n      listenFor.forEach(type => evs.addEventListener(type, onMessage));\n      return evs;\n    }\n    function open() {\n      getEventSource().then(eventSource => {\n        es = eventSource;\n      }).catch(reason => {\n        observer.error(reason);\n        stop();\n      });\n    }\n    function stop() {\n      stopped = true;\n      unsubscribe();\n    }\n    return stop;\n  });\n}\nfunction parseEvent(event) {\n  try {\n    const data = event.data && JSON.parse(event.data) || {};\n    return Object.assign({\n      type: event.type\n    }, data);\n  } catch (err) {\n    return err;\n  }\n}\nfunction cooerceError(err) {\n  if (err instanceof Error) {\n    return err;\n  }\n  const evt = parseEvent(err);\n  return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));\n}\nfunction extractErrorMessage(err) {\n  if (!err.error) {\n    return err.message || \"Unknown listener error\";\n  }\n  if (err.error.description) {\n    return err.error.description;\n  }\n  return typeof err.error === \"string\" ? err.error : JSON.stringify(err.error, null, 2);\n}\nvar __accessCheck$3 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$3 = (obj, member, getter) => {\n  __accessCheck$3(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$3 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$3 = (obj, member, value, setter) => {\n  __accessCheck$3(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$2, _httpRequest$3, _client2$2, _httpRequest2$3;\nclass ObservableDatasetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$3(this, _client$2, void 0);\n    __privateAdd$3(this, _httpRequest$3, void 0);\n    __privateSet$3(this, _client$2, client);\n    __privateSet$3(this, _httpRequest$3, httpRequest);\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PUT\", name, options);\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PATCH\", name, options);\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"DELETE\", name);\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {\n      uri: \"/datasets\"\n    });\n  }\n}\n_client$2 = new WeakMap();\n_httpRequest$3 = new WeakMap();\nclass DatasetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$3(this, _client2$2, void 0);\n    __privateAdd$3(this, _httpRequest2$3, void 0);\n    __privateSet$3(this, _client2$2, client);\n    __privateSet$3(this, _httpRequest2$3, httpRequest);\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PUT\", name, options));\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PATCH\", name, options));\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"DELETE\", name));\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return lastValueFrom(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {\n      uri: \"/datasets\"\n    }));\n  }\n}\n_client2$2 = new WeakMap();\n_httpRequest2$3 = new WeakMap();\nfunction _modify(client, httpRequest, method, name, options) {\n  dataset(name);\n  return _request(client, httpRequest, {\n    method,\n    uri: \"/datasets/\".concat(name),\n    body: options\n  });\n}\nvar __accessCheck$2 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$2 = (obj, member, getter) => {\n  __accessCheck$2(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$2 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$2 = (obj, member, value, setter) => {\n  __accessCheck$2(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$1, _httpRequest$2, _client2$1, _httpRequest2$2;\nclass ObservableProjectsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$2(this, _client$1, void 0);\n    __privateAdd$2(this, _httpRequest$2, void 0);\n    __privateSet$2(this, _client$1, client);\n    __privateSet$2(this, _httpRequest$2, httpRequest);\n  }\n  /**\n   * Fetch a list of projects the authenticated user has access to\n   */\n  list() {\n    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n      uri: \"/projects\"\n    });\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId) {\n    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n      uri: \"/projects/\".concat(projectId)\n    });\n  }\n}\n_client$1 = new WeakMap();\n_httpRequest$2 = new WeakMap();\nclass ProjectsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$2(this, _client2$1, void 0);\n    __privateAdd$2(this, _httpRequest2$2, void 0);\n    __privateSet$2(this, _client2$1, client);\n    __privateSet$2(this, _httpRequest2$2, httpRequest);\n  }\n  /**\n   * Fetch a list of projects the authenticated user has access to\n   */\n  list() {\n    return lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n      uri: \"/projects\"\n    }));\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId) {\n    return lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n      uri: \"/projects/\".concat(projectId)\n    }));\n  }\n}\n_client2$1 = new WeakMap();\n_httpRequest2$2 = new WeakMap();\nvar __accessCheck$1 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$1 = (obj, member, getter) => {\n  __accessCheck$1(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$1 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$1 = (obj, member, value, setter) => {\n  __accessCheck$1(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client, _httpRequest$1, _client2, _httpRequest2$1;\nclass ObservableUsersClient {\n  constructor(client, httpRequest) {\n    __privateAdd$1(this, _client, void 0);\n    __privateAdd$1(this, _httpRequest$1, void 0);\n    __privateSet$1(this, _client, client);\n    __privateSet$1(this, _httpRequest$1, httpRequest);\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {\n      uri: \"/users/\".concat(id)\n    });\n  }\n}\n_client = new WeakMap();\n_httpRequest$1 = new WeakMap();\nclass UsersClient {\n  constructor(client, httpRequest) {\n    __privateAdd$1(this, _client2, void 0);\n    __privateAdd$1(this, _httpRequest2$1, void 0);\n    __privateSet$1(this, _client2, client);\n    __privateSet$1(this, _httpRequest2$1, httpRequest);\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return lastValueFrom(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {\n      uri: \"/users/\".concat(id)\n    }));\n  }\n}\n_client2 = new WeakMap();\n_httpRequest2$1 = new WeakMap();\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _clientConfig, _httpRequest, _clientConfig2, _httpRequest2;\nconst _ObservableSanityClient = class {\n  constructor(httpRequest) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n    /**\n     * Private properties\n     */\n    __privateAdd(this, _clientConfig, void 0);\n    __privateAdd(this, _httpRequest, void 0);\n    /**\n     * Instance properties\n     */\n    this.listen = _listen;\n    this.config(config);\n    __privateSet(this, _httpRequest, httpRequest);\n    this.assets = new ObservableAssetsClient(this, __privateGet(this, _httpRequest));\n    this.datasets = new ObservableDatasetsClient(this, __privateGet(this, _httpRequest));\n    this.projects = new ObservableProjectsClient(this, __privateGet(this, _httpRequest));\n    this.users = new ObservableUsersClient(this, __privateGet(this, _httpRequest));\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new _ObservableSanityClient(__privateGet(this, _httpRequest), this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0) {\n      return {\n        ...__privateGet(this, _clientConfig)\n      };\n    }\n    if (__privateGet(this, _clientConfig) && __privateGet(this, _clientConfig).allowReconfigure === false) {\n      throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n    }\n    __privateSet(this, _clientConfig, initConfig(newConfig, __privateGet(this, _clientConfig) || {}));\n    return this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    return new _ObservableSanityClient(__privateGet(this, _httpRequest), {\n      ...this.config(),\n      ...newConfig\n    });\n  }\n  fetch(query, params) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _fetch(this, __privateGet(this, _httpRequest), query, params, options);\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return _getDocument(this, __privateGet(this, _httpRequest), id, options);\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return _getDocuments(this, __privateGet(this, _httpRequest), ids, options);\n  }\n  create(document, options) {\n    return _create(this, __privateGet(this, _httpRequest), document, \"create\", options);\n  }\n  createIfNotExists(document, options) {\n    return _createIfNotExists(this, __privateGet(this, _httpRequest), document, options);\n  }\n  createOrReplace(document, options) {\n    return _createOrReplace(this, __privateGet(this, _httpRequest), document, options);\n  }\n  delete(selection, options) {\n    return _delete(this, __privateGet(this, _httpRequest), selection, options);\n  }\n  mutate(operations, options) {\n    return _mutate(this, __privateGet(this, _httpRequest), operations, options);\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param documentId - Document ID(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   */\n  patch(documentId, operations) {\n    return new ObservablePatch(documentId, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new ObservableTransaction(operations, this);\n  }\n  /**\n   * DEPRECATED: Perform an HTTP request against the Sanity API\n   *\n   * @deprecated Use your own request library!\n   * @param options - Request options\n   */\n  request(options) {\n    return _request(this, __privateGet(this, _httpRequest), options);\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n};\nlet ObservableSanityClient = _ObservableSanityClient;\n_clientConfig = new WeakMap();\n_httpRequest = new WeakMap();\nconst _SanityClient = class {\n  constructor(httpRequest) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n    /**\n     * Private properties\n     */\n    __privateAdd(this, _clientConfig2, void 0);\n    __privateAdd(this, _httpRequest2, void 0);\n    /**\n     * Instance properties\n     */\n    this.listen = _listen;\n    this.config(config);\n    __privateSet(this, _httpRequest2, httpRequest);\n    this.assets = new AssetsClient(this, __privateGet(this, _httpRequest2));\n    this.datasets = new DatasetsClient(this, __privateGet(this, _httpRequest2));\n    this.projects = new ProjectsClient(this, __privateGet(this, _httpRequest2));\n    this.users = new UsersClient(this, __privateGet(this, _httpRequest2));\n    this.observable = new ObservableSanityClient(httpRequest, config);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new _SanityClient(__privateGet(this, _httpRequest2), this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0) {\n      return {\n        ...__privateGet(this, _clientConfig2)\n      };\n    }\n    if (__privateGet(this, _clientConfig2) && __privateGet(this, _clientConfig2).allowReconfigure === false) {\n      throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n    }\n    if (this.observable) {\n      this.observable.config(newConfig);\n    }\n    __privateSet(this, _clientConfig2, initConfig(newConfig, __privateGet(this, _clientConfig2) || {}));\n    return this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    return new _SanityClient(__privateGet(this, _httpRequest2), {\n      ...this.config(),\n      ...newConfig\n    });\n  }\n  fetch(query, params) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return lastValueFrom(_fetch(this, __privateGet(this, _httpRequest2), query, params, options));\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return lastValueFrom(_getDocument(this, __privateGet(this, _httpRequest2), id, options));\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return lastValueFrom(_getDocuments(this, __privateGet(this, _httpRequest2), ids, options));\n  }\n  create(document, options) {\n    return lastValueFrom(_create(this, __privateGet(this, _httpRequest2), document, \"create\", options));\n  }\n  createIfNotExists(document, options) {\n    return lastValueFrom(_createIfNotExists(this, __privateGet(this, _httpRequest2), document, options));\n  }\n  createOrReplace(document, options) {\n    return lastValueFrom(_createOrReplace(this, __privateGet(this, _httpRequest2), document, options));\n  }\n  delete(selection, options) {\n    return lastValueFrom(_delete(this, __privateGet(this, _httpRequest2), selection, options));\n  }\n  mutate(operations, options) {\n    return lastValueFrom(_mutate(this, __privateGet(this, _httpRequest2), operations, options));\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param documentId - Document ID(s)to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   */\n  patch(documentId, operations) {\n    return new Patch(documentId, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new Transaction(operations, this);\n  }\n  /**\n   * DEPRECATED: Perform an HTTP request against the Sanity API\n   *\n   * @deprecated Use your own request library!\n   * @param options - Request options\n   */\n  request(options) {\n    return lastValueFrom(_request(this, __privateGet(this, _httpRequest2), options));\n  }\n  /**\n   * DEPRECATED: Perform an HTTP request a `/data` sub-endpoint\n   *\n   * @deprecated Use your own request library!\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   */\n  dataRequest(endpoint, body, options) {\n    return lastValueFrom(_dataRequest(this, __privateGet(this, _httpRequest2), endpoint, body, options));\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n};\nlet SanityClient = _SanityClient;\n_clientConfig2 = new WeakMap();\n_httpRequest2 = new WeakMap();\nconst httpRequest = defineHttpRequest(envMiddleware);\nconst requester = httpRequest.defaultRequester;\nconst createClient = config => new SanityClient(httpRequest, config);\nfunction deprecatedCreateClient(config) {\n  printNoDefaultExport();\n  return new SanityClient(httpRequest, config);\n}\nexport { BasePatch, BaseTransaction, ClientError, ObservablePatch, ObservableSanityClient, ObservableTransaction, Patch, SanityClient, ServerError, Transaction, createClient, deprecatedCreateClient as default, requester };","map":{"version":3,"names":["envMiddleware","MAX_ITEMS_IN_ERROR_MESSAGE","ClientError","Error","constructor","res","props","extractErrorProps","message","statusCode","Object","assign","ServerError","body","response","responseBody","stringifyBody","details","error","concat","isMutationError","allItems","items","slice","map","item","_a","description","filter","Boolean","itemsStr","length","join","httpErrorMessage","isPlainObject","type","obj","Array","isArray","statusMessage","method","url","contentType","headers","toLowerCase","isJson","indexOf","JSON","stringify","httpError","onResponse","printWarnings","warn","warnings","forEach","msg","console","defineHttpRequest","request","getIt","jsonRequest","jsonResponse","progress","observable","implementation","Observable","httpRequest","options","requester","arguments","undefined","maxRedirects","defaultRequester","projectHeader","requestOptions","config","overrides","token","Authorization","useGlobalApi","useProjectHostname","projectId","withCredentials","timeout","proxy","json","getSelection","sel","id","query","params","selectionOpts","VALID_ASSET_TYPES","VALID_INSERT_LOCATIONS","dataset","name","test","validateAssetType","validateObject","op","val","validateDocumentId","includes","requireDocumentId","doc","_id","validateInsert","at","selector","signature","valid","loc","hasDataset","requestTag","tag","encodeQueryString","_ref","searchParams","URLSearchParams","opts","set","key","value","entries","_client$5","_client2$5","BasePatch","selection","operations","attrs","_assign","setIfMissing","diffMatchPatch","unset","inc","dec","insert","append","prepend","splice","start","deleteCount","delAll","startIndex","delCount","Math","max","delRange","rangeSelector","ifRevisionId","rev","ifRevisionID","serialize","toJSON","reset","merge","_set","_ObservablePatch","client","__privateAdd$6","__privateSet$6","clone","__privateGet$6","commit","returnFirst","returnDocuments","mutate","patch","ObservablePatch","WeakMap","_Patch","Patch","_client$4","_client2$4","defaultMutateOptions","BaseTransaction","transactionId","trxId","create","_add","createIfNotExists","createOrReplace","delete","documentId","mut","push","_Transaction","__privateAdd$5","__privateSet$5","__privateGet$5","patchOrDocumentId","patchOps","isBuilder","isPatch","Transaction","_ObservableTransaction","ObservableTransaction","excludeFalsey","param","defValue","getMutationQuery","dryRun","returnIds","visibility","autoGenerateArrayKeys","skipCrossDatasetReferenceValidation","isResponse","event","getBody","indexBy","docs","attr","reduce","indexed","getQuerySizeLimit","_fetch","mapResponse","filterResponse","result","_dataRequest","pipe","_getDocument","uri","_getDataUrl","_requestObservable","documents","_getDocuments","ids","_createIfNotExists","_create","_createOrReplace","_delete","mutations","_mutate","muts","endpoint","isMutation","isQuery","strQuery","useGet","stringQuery","reqOptions","canUseCdn","signal","results","document","mutation","useCdn","requestTagPrefix","_getUrl","subscriber","subscribe","_withAbortSignal","_request","operation","path","catalog","baseUri","replace","cdnUrl","base","input","observer","abort","_createAbortError","aborted","subscription","addEventListener","removeEventListener","unsubscribe","isDomExceptionSupported","globalThis","DOMException","_b","reason","_client$3","_httpRequest$4","_client2$3","_httpRequest2$4","ObservableAssetsClient","__privateAdd$4","__privateSet$4","upload","assetType","_upload","__privateGet$4","AssetsClient","lastValueFrom","meta","extract","assetEndpoint","optionsFromFile","label","title","creditLine","filename","source","sourceId","sourceName","sourceUrl","file","File","preserveFilename","BASE_URL","generateHelpUrl","slug","once","fn","didCall","returnValue","createWarningPrinter","_len","args","_key","printCdnWarning","printBrowserTokenWarning","printNoApiVersionSpecifiedWarning","printNoDefaultExport","defaultCdnHost","defaultConfig","apiHost","apiVersion","LOCALHOSTS","isLocal","host","validateApiVersion","validateApiVersion2","apiDate","Date","apiVersionValid","getTime","initConfig","prevConfig","specifiedConfig","newConfig","projectBased","Promise","helpUrl","isBrowser","window","location","hostname","isLocalhost","ignoreBrowserTokenWarning","isDefaultApi","hostParts","split","protocol","cdnHost","defaults","keys","target","prop","pick","MAX_URL_LENGTH","possibleOptions","defaultOptions","includeResult","_listen","listenOpts","qs","listenFor","events","shouldEmitReconnect","esOptions","es","getEventSource","then","eventSource","catch","stop","reconnectTimer","stopped","onError","emitReconnect","readyState","CLOSED","clearTimeout","setTimeout","open","onChannelError","err","cooerceError","onMessage","evt","parseEvent","next","onDisconnect","complete","close","default","EventSource","evs","data","parse","extractErrorMessage","_client$2","_httpRequest$3","_client2$2","_httpRequest2$3","ObservableDatasetsClient","__privateAdd$3","__privateSet$3","_modify","__privateGet$3","edit","list","DatasetsClient","_client$1","_httpRequest$2","_client2$1","_httpRequest2$2","ObservableProjectsClient","__privateAdd$2","__privateSet$2","__privateGet$2","getById","ProjectsClient","_client","_httpRequest$1","_client2","_httpRequest2$1","ObservableUsersClient","__privateAdd$1","__privateSet$1","__privateGet$1","UsersClient","_clientConfig","_httpRequest","_clientConfig2","_httpRequest2","_ObservableSanityClient","__privateAdd","listen","__privateSet","assets","__privateGet","datasets","projects","users","allowReconfigure","withConfig","fetch","getDocument","getDocuments","transaction","getUrl","getDataUrl","ObservableSanityClient","_SanityClient","dataRequest","SanityClient","createClient","deprecatedCreateClient"],"sources":["/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/http/browserMiddleware.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/http/errors.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/http/request.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/http/requestOptions.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/util/getSelection.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/validators.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/data/encodeQueryString.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/data/patch.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/data/transaction.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/data/dataMethods.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/assets/AssetsClient.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/generateHelpUrl.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/util/once.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/warnings.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/config.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/util/defaults.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/util/pick.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/data/listen.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/datasets/DatasetsClient.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/projects/ProjectsClient.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/users/UsersClient.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/SanityClient.ts","/Users/apple/Documents/sharme_socialmedia/shareme_frontend/node_modules/@sanity/client/src/index.browser.ts"],"sourcesContent":["export default []\n","import type {Any, ErrorProps, MutationError} from '../types'\n\nconst MAX_ITEMS_IN_ERROR_MESSAGE = 5\n\n/** @public */\nexport class ClientError extends Error {\n  response: ErrorProps['response']\n  statusCode: ErrorProps['statusCode'] = 400\n  responseBody: ErrorProps['responseBody']\n  details: ErrorProps['details']\n\n  constructor(res: Any) {\n    const props = extractErrorProps(res)\n    super(props.message)\n    Object.assign(this, props)\n  }\n}\n\n/** @public */\nexport class ServerError extends Error {\n  response: ErrorProps['response']\n  statusCode: ErrorProps['statusCode'] = 500\n  responseBody: ErrorProps['responseBody']\n  details: ErrorProps['details']\n\n  constructor(res: Any) {\n    const props = extractErrorProps(res)\n    super(props.message)\n    Object.assign(this, props)\n  }\n}\n\nfunction extractErrorProps(res: Any): ErrorProps {\n  const body = res.body\n  const props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res),\n    message: '',\n    details: undefined as Any,\n  }\n\n  // API/Boom style errors ({statusCode, error, message})\n  if (body.error && body.message) {\n    props.message = `${body.error} - ${body.message}`\n    return props\n  }\n\n  // Mutation errors (specifically)\n  if (isMutationError(body)) {\n    const allItems = body.error.items || []\n    const items = allItems\n      .slice(0, MAX_ITEMS_IN_ERROR_MESSAGE)\n      .map((item) => item.error?.description)\n      .filter(Boolean)\n    let itemsStr = items.length ? `:\\n- ${items.join('\\n- ')}` : ''\n    if (allItems.length > MAX_ITEMS_IN_ERROR_MESSAGE) {\n      itemsStr += `\\n...and ${allItems.length - MAX_ITEMS_IN_ERROR_MESSAGE} more`\n    }\n    props.message = `${body.error.description}${itemsStr}`\n    props.details = body.error\n    return props\n  }\n\n  // Query/database errors ({error: {description, other, arb, props}})\n  if (body.error && body.error.description) {\n    props.message = body.error.description\n    props.details = body.error\n    return props\n  }\n\n  // Other, more arbitrary errors\n  props.message = body.error || body.message || httpErrorMessage(res)\n  return props\n}\n\nfunction isMutationError(body: Any): body is MutationError {\n  return (\n    isPlainObject(body) &&\n    isPlainObject(body.error) &&\n    body.error.type === 'mutationError' &&\n    typeof body.error.description === 'string'\n  )\n}\n\nfunction isPlainObject(obj: Any): obj is Record<string, unknown> {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj)\n}\n\nfunction httpErrorMessage(res: Any) {\n  const statusMessage = res.statusMessage ? ` ${res.statusMessage}` : ''\n  return `${res.method}-request to ${res.url} resulted in HTTP ${res.statusCode}${statusMessage}`\n}\n\nfunction stringifyBody(body: Any, res: Any) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? JSON.stringify(body, null, 2) : body\n}\n","import {getIt, type Middlewares} from 'get-it'\nimport {jsonRequest, jsonResponse, observable, progress} from 'get-it/middleware'\nimport {Observable} from 'rxjs'\n\nimport type {Any, HttpRequest, RequestOptions} from '../types'\nimport {ClientError, ServerError} from './errors'\n\nconst httpError = {\n  onResponse: (res: Any) => {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res)\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res)\n    }\n\n    return res\n  },\n}\n\nconst printWarnings = {\n  onResponse: (res: Any) => {\n    const warn = res.headers['x-sanity-warning']\n    const warnings = Array.isArray(warn) ? warn : [warn]\n    warnings.filter(Boolean).forEach((msg) => console.warn(msg)) // eslint-disable-line no-console\n    return res\n  },\n}\n\n/** @internal */\nexport function defineHttpRequest(envMiddleware: Middlewares): HttpRequest {\n  const request = getIt([\n    ...envMiddleware,\n    printWarnings,\n    jsonRequest(),\n    jsonResponse(),\n    progress(),\n    httpError,\n    observable({implementation: Observable}),\n  ])\n\n  function httpRequest(options: RequestOptions, requester = request) {\n    return requester({maxRedirects: 0, ...options} as Any)\n  }\n\n  httpRequest.defaultRequester = request\n\n  return httpRequest\n}\n","import type {RequestOptions} from 'get-it'\n\nimport type {Any} from '../types'\n\nconst projectHeader = 'X-Sanity-Project-ID'\n\nexport function requestOptions(config: Any, overrides: Any = {}): Omit<RequestOptions, 'url'> {\n  const headers: Any = {}\n\n  const token = overrides.token || config.token\n  if (token) {\n    headers.Authorization = `Bearer ${token}`\n  }\n\n  if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {\n    headers[projectHeader] = config.projectId\n  }\n\n  const withCredentials = Boolean(\n    typeof overrides.withCredentials === 'undefined'\n      ? config.token || config.withCredentials\n      : overrides.withCredentials\n  )\n\n  const timeout = typeof overrides.timeout === 'undefined' ? config.timeout : overrides.timeout\n  return Object.assign({}, overrides, {\n    headers: Object.assign({}, headers, overrides.headers || {}),\n    timeout: typeof timeout === 'undefined' ? 5 * 60 * 1000 : timeout,\n    proxy: overrides.proxy || config.proxy,\n    json: true,\n    withCredentials,\n  })\n}\n","import type {MutationSelection} from '../types'\n\nexport function getSelection(sel: unknown): MutationSelection {\n  if (typeof sel === 'string' || Array.isArray(sel)) {\n    return {id: sel}\n  }\n\n  if (typeof sel === 'object' && sel !== null && 'query' in sel && typeof sel.query === 'string') {\n    return 'params' in sel && typeof sel.params === 'object' && sel.params !== null\n      ? {query: sel.query, params: sel.params}\n      : {query: sel.query}\n  }\n\n  const selectionOpts = [\n    '* Document ID (<docId>)',\n    '* Array of document IDs',\n    '* Object containing `query`',\n  ].join('\\n')\n\n  throw new Error(`Unknown selection - must be one of:\\n\\n${selectionOpts}`)\n}\n","import type {Any, InitializedClientConfig} from './types'\n\nconst VALID_ASSET_TYPES = ['image', 'file']\nconst VALID_INSERT_LOCATIONS = ['before', 'after', 'replace']\n\nexport const dataset = (name: string) => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n    throw new Error(\n      'Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters'\n    )\n  }\n}\n\nexport const projectId = (id: string) => {\n  if (!/^[-a-z0-9]+$/i.test(id)) {\n    throw new Error('`projectId` can only contain only a-z, 0-9 and dashes')\n  }\n}\n\nexport const validateAssetType = (type: string) => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n    throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(', ')}`)\n  }\n}\n\nexport const validateObject = (op: string, val: Any) => {\n  if (val === null || typeof val !== 'object' || Array.isArray(val)) {\n    throw new Error(`${op}() takes an object of properties`)\n  }\n}\n\nexport const validateDocumentId = (op: string, id: string) => {\n  if (typeof id !== 'string' || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes('..')) {\n    throw new Error(`${op}(): \"${id}\" is not a valid document ID`)\n  }\n}\n\nexport const requireDocumentId = (op: string, doc: Record<string, Any>) => {\n  if (!doc._id) {\n    throw new Error(`${op}() requires that the document contains an ID (\"_id\" property)`)\n  }\n\n  validateDocumentId(op, doc._id)\n}\n\nexport const validateInsert = (at: string, selector: string, items: Any[]) => {\n  const signature = 'insert(at, selector, items)'\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map((loc) => `\"${loc}\"`).join(', ')\n    throw new Error(`${signature} takes an \"at\"-argument which is one of: ${valid}`)\n  }\n\n  if (typeof selector !== 'string') {\n    throw new Error(`${signature} takes a \"selector\"-argument which must be a string`)\n  }\n\n  if (!Array.isArray(items)) {\n    throw new Error(`${signature} takes an \"items\"-argument which must be an array`)\n  }\n}\n\nexport const hasDataset = (config: InitializedClientConfig): string => {\n  if (!config.dataset) {\n    throw new Error('`dataset` must be provided to perform queries')\n  }\n\n  return config.dataset || ''\n}\n\nexport const requestTag = (tag: string) => {\n  if (typeof tag !== 'string' || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n    throw new Error(\n      `Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.`\n    )\n  }\n\n  return tag\n}\n","import type {Any, QueryParams} from '../types'\n\nexport const encodeQueryString = ({\n  query,\n  params = {},\n  options = {},\n}: {\n  query: string\n  params?: QueryParams\n  options?: Any\n}) => {\n  const searchParams = new URLSearchParams()\n  // We generally want tag at the start of the query string\n  const {tag, ...opts} = options\n  if (tag) searchParams.set('tag', tag)\n  searchParams.set('query', query)\n\n  // Iterate params, the keys are prefixed with `$` and their values JSON stringified\n  for (const [key, value] of Object.entries(params)) {\n    searchParams.set(`$${key}`, JSON.stringify(value))\n  }\n  // Options are passed as-is\n  for (const [key, value] of Object.entries(opts)) {\n    // Skip falsy values\n    if (value) searchParams.set(key, `${value}`)\n  }\n\n  return `?${searchParams}`\n}\n","import {type Observable} from 'rxjs'\n\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {\n  AllDocumentIdsMutationOptions,\n  AllDocumentsMutationOptions,\n  Any,\n  AttributeSet,\n  BaseMutationOptions,\n  FirstDocumentIdMutationOptions,\n  FirstDocumentMutationOptions,\n  MultipleMutationResult,\n  PatchMutationOperation,\n  PatchOperations,\n  PatchSelection,\n  SanityDocument,\n  SingleMutationResult,\n} from '../types'\nimport {getSelection} from '../util/getSelection'\nimport {validateInsert, validateObject} from '../validators'\n\n/** @internal */\nexport class BasePatch {\n  protected selection: PatchSelection\n  protected operations: PatchOperations\n  constructor(selection: PatchSelection, operations: PatchOperations = {}) {\n    this.selection = selection\n    this.operations = operations\n  }\n\n  /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  set(attrs: AttributeSet): this {\n    return this._assign('set', attrs)\n  }\n\n  /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  setIfMissing(attrs: AttributeSet): this {\n    return this._assign('setIfMissing', attrs)\n  }\n\n  /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */\n  diffMatchPatch(attrs: AttributeSet): this {\n    validateObject('diffMatchPatch', attrs)\n    return this._assign('diffMatchPatch', attrs)\n  }\n\n  /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */\n  unset(attrs: string[]): this {\n    if (!Array.isArray(attrs)) {\n      throw new Error('unset(attrs) takes an array of attributes to unset, non-array given')\n    }\n\n    this.operations = Object.assign({}, this.operations, {unset: attrs})\n    return this\n  }\n\n  /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */\n  inc(attrs: {[key: string]: number}): this {\n    return this._assign('inc', attrs)\n  }\n\n  /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */\n  dec(attrs: {[key: string]: number}): this {\n    return this._assign('dec', attrs)\n  }\n\n  /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */\n  insert(at: 'before' | 'after' | 'replace', selector: string, items: Any[]): this {\n    validateInsert(at, selector, items)\n    return this._assign('insert', {[at]: selector, items})\n  }\n\n  /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */\n  append(selector: string, items: Any[]): this {\n    return this.insert('after', `${selector}[-1]`, items)\n  }\n\n  /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */\n  prepend(selector: string, items: Any[]): this {\n    return this.insert('before', `${selector}[0]`, items)\n  }\n\n  /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */\n  splice(selector: string, start: number, deleteCount?: number, items?: Any[]): this {\n    // Negative indexes doesn't mean the same in Sanity as they do in JS;\n    // -1 means \"actually at the end of the array\", which allows inserting\n    // at the end of the array without knowing its length. We therefore have\n    // to substract negative indexes by one to match JS. If you want Sanity-\n    // behaviour, just use `insert('replace', selector, items)` directly\n    const delAll = typeof deleteCount === 'undefined' || deleteCount === -1\n    const startIndex = start < 0 ? start - 1 : start\n    const delCount = delAll ? -1 : Math.max(0, start + deleteCount)\n    const delRange = startIndex < 0 && delCount >= 0 ? '' : delCount\n    const rangeSelector = `${selector}[${startIndex}:${delRange}]`\n    return this.insert('replace', rangeSelector, items || [])\n  }\n\n  /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */\n  ifRevisionId(rev: string): this {\n    this.operations.ifRevisionID = rev\n    return this\n  }\n\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  serialize(): PatchMutationOperation {\n    return {...getSelection(this.selection), ...this.operations}\n  }\n\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  toJSON(): PatchMutationOperation {\n    return this.serialize()\n  }\n\n  /**\n   * Clears the patch of all operations\n   */\n  reset(): this {\n    this.operations = {}\n    return this\n  }\n\n  protected _assign(op: keyof PatchOperations, props: Any, merge = true): this {\n    validateObject(op, props)\n    this.operations = Object.assign({}, this.operations, {\n      [op]: Object.assign({}, (merge && this.operations[op]) || {}, props),\n    })\n    return this\n  }\n\n  protected _set(op: keyof PatchOperations, props: Any): this {\n    return this._assign(op, props, false)\n  }\n}\n\n/** @public */\nexport class ObservablePatch extends BasePatch {\n  #client?: ObservableSanityClient\n\n  constructor(\n    selection: PatchSelection,\n    operations?: PatchOperations,\n    client?: ObservableSanityClient\n  ) {\n    super(selection, operations)\n    this.#client = client\n  }\n\n  /**\n   * Clones the patch\n   */\n  clone(): ObservablePatch {\n    return new ObservablePatch(this.selection, {...this.operations}, this.#client)\n  }\n\n  /**\n   * Commit the patch, returning an observable that produces the first patched document\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Commit the patch, returning an observable that produces an array of the mutated documents\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Commit the patch, returning an observable that produces a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: FirstDocumentIdMutationOptions): Observable<SingleMutationResult>\n  /**\n   * Commit the patch, returning an observable that produces a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: AllDocumentIdsMutationOptions): Observable<MultipleMutationResult>\n  /**\n   * Commit the patch, returning an observable that produces the first patched document\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options?:\n      | FirstDocumentMutationOptions\n      | AllDocumentsMutationOptions\n      | FirstDocumentIdMutationOptions\n      | AllDocumentIdsMutationOptions\n      | BaseMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    if (!this.#client) {\n      throw new Error(\n        'No `client` passed to patch, either provide one or pass the ' +\n          'patch to a clients `mutate()` method'\n      )\n    }\n\n    const returnFirst = typeof this.selection === 'string'\n    const opts = Object.assign({returnFirst, returnDocuments: true}, options)\n    return this.#client.mutate<R>({patch: this.serialize()} as Any, opts)\n  }\n}\n\n/** @public */\nexport class Patch extends BasePatch {\n  #client?: SanityClient\n  constructor(selection: PatchSelection, operations?: PatchOperations, client?: SanityClient) {\n    super(selection, operations)\n    this.#client = client\n  }\n\n  /**\n   * Clones the patch\n   */\n  clone(): Patch {\n    return new Patch(this.selection, {...this.operations}, this.#client)\n  }\n\n  /**\n   * Commit the patch, returning a promise that resolves to the first patched document\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Commit the patch, returning a promise that resolves to an array of the mutated documents\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Commit the patch, returning a promise that resolves to a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: FirstDocumentIdMutationOptions): Promise<SingleMutationResult>\n  /**\n   * Commit the patch, returning a promise that resolves to a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: AllDocumentIdsMutationOptions): Promise<MultipleMutationResult>\n  /**\n   * Commit the patch, returning a promise that resolves to the first patched document\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options?:\n      | FirstDocumentMutationOptions\n      | AllDocumentsMutationOptions\n      | FirstDocumentIdMutationOptions\n      | AllDocumentIdsMutationOptions\n      | BaseMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    if (!this.#client) {\n      throw new Error(\n        'No `client` passed to patch, either provide one or pass the ' +\n          'patch to a clients `mutate()` method'\n      )\n    }\n\n    const returnFirst = typeof this.selection === 'string'\n    const opts = Object.assign({returnFirst, returnDocuments: true}, options)\n    return this.#client.mutate<R>({patch: this.serialize()} as Any, opts)\n  }\n}\n","import type {Observable} from 'rxjs'\n\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {\n  Any,\n  BaseMutationOptions,\n  IdentifiedSanityDocumentStub,\n  MultipleMutationResult,\n  Mutation,\n  PatchOperations,\n  SanityDocument,\n  SanityDocumentStub,\n  SingleMutationResult,\n  TransactionAllDocumentIdsMutationOptions,\n  TransactionAllDocumentsMutationOptions,\n  TransactionFirstDocumentIdMutationOptions,\n  TransactionFirstDocumentMutationOptions,\n} from '../types'\nimport * as validators from '../validators'\nimport {ObservablePatch, Patch} from './patch'\n\n/** @public */\nexport type PatchBuilder = (patch: Patch) => Patch\n/** @public */\nexport type ObservablePatchBuilder = (patch: ObservablePatch) => ObservablePatch\n\nconst defaultMutateOptions = {returnDocuments: false}\n\n/** @internal */\nexport class BaseTransaction {\n  protected operations: Mutation[]\n  protected trxId?: string\n  constructor(operations: Mutation[] = [], transactionId?: string) {\n    this.operations = operations\n    this.trxId = transactionId\n  }\n  /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(doc: SanityDocumentStub<R>): this {\n    validators.validateObject('create', doc)\n    return this._add({create: doc})\n  }\n\n  /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    doc: IdentifiedSanityDocumentStub<R>\n  ): this {\n    const op = 'createIfNotExists'\n    validators.validateObject(op, doc)\n    validators.requireDocumentId(op, doc)\n    return this._add({[op]: doc})\n  }\n\n  /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    doc: IdentifiedSanityDocumentStub<R>\n  ): this {\n    const op = 'createOrReplace'\n    validators.validateObject(op, doc)\n    validators.requireDocumentId(op, doc)\n    return this._add({[op]: doc})\n  }\n\n  /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */\n  delete(documentId: string): this {\n    validators.validateDocumentId('delete', documentId)\n    return this._add({delete: {id: documentId}})\n  }\n\n  /**\n   * Gets the current transaction ID, if any\n   */\n  transactionId(): string | undefined\n  /**\n   * Set the ID of this transaction.\n   *\n   * @param id - Transaction ID\n   */\n  transactionId(id: string): this\n  transactionId(id?: string): this | string | undefined {\n    if (!id) {\n      return this.trxId\n    }\n\n    this.trxId = id\n    return this\n  }\n\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  serialize(): Mutation[] {\n    return [...this.operations]\n  }\n\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  toJSON(): Mutation[] {\n    return this.serialize()\n  }\n\n  /**\n   * Clears the transaction of all operations\n   */\n  reset(): this {\n    this.operations = []\n    return this\n  }\n\n  protected _add(mut: Mutation): this {\n    this.operations.push(mut)\n    return this\n  }\n}\n\n/** @public */\nexport class Transaction extends BaseTransaction {\n  #client?: SanityClient\n  constructor(operations?: Mutation[], client?: SanityClient, transactionId?: string) {\n    super(operations, transactionId)\n    this.#client = client\n  }\n\n  /**\n   * Clones the transaction\n   */\n  clone(): Transaction {\n    return new Transaction([...this.operations], this.#client, this.trxId)\n  }\n\n  /**\n   * Commit the transaction, returning a promise that resolves to the first mutated document\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any>>(\n    options: TransactionFirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Commit the transaction, returning a promise that resolves to an array of the mutated documents\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any>>(\n    options: TransactionAllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Commit the transaction, returning a promise that resolves to a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: TransactionFirstDocumentIdMutationOptions): Promise<SingleMutationResult>\n  /**\n   * Commit the transaction, returning a promise that resolves to a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: TransactionAllDocumentIdsMutationOptions): Promise<MultipleMutationResult>\n  /**\n   * Commit the transaction, returning a promise that resolves to a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options?: BaseMutationOptions): Promise<MultipleMutationResult>\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options?:\n      | TransactionFirstDocumentMutationOptions\n      | TransactionAllDocumentsMutationOptions\n      | TransactionFirstDocumentIdMutationOptions\n      | TransactionAllDocumentIdsMutationOptions\n      | BaseMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    if (!this.#client) {\n      throw new Error(\n        'No `client` passed to transaction, either provide one or pass the ' +\n          'transaction to a clients `mutate()` method'\n      )\n    }\n\n    return this.#client.mutate<R>(\n      this.serialize() as Any,\n      Object.assign({transactionId: this.trxId}, defaultMutateOptions, options || {})\n    )\n  }\n\n  /**\n   * Performs a patch on the given document ID. Can either be a builder function or an object of patch operations.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to perform the patch operation on\n   * @param patchOps - Operations to perform, or a builder function\n   */\n  patch(documentId: string, patchOps?: PatchBuilder | PatchOperations): this\n  /**\n   * Adds the given patch instance to the transaction.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param patch - Patch to execute\n   */\n  patch(patch: Patch): this\n  patch(patchOrDocumentId: Patch | string, patchOps?: PatchBuilder | PatchOperations): this {\n    const isBuilder = typeof patchOps === 'function'\n    const isPatch = typeof patchOrDocumentId !== 'string' && patchOrDocumentId instanceof Patch\n\n    // transaction.patch(client.patch('documentId').inc({visits: 1}))\n    if (isPatch) {\n      return this._add({patch: patchOrDocumentId.serialize()})\n    }\n\n    // patch => patch.inc({visits: 1}).set({foo: 'bar'})\n    if (isBuilder) {\n      const patch = patchOps(new Patch(patchOrDocumentId, {}, this.#client))\n      if (!(patch instanceof Patch)) {\n        throw new Error('function passed to `patch()` must return the patch')\n      }\n\n      return this._add({patch: patch.serialize()})\n    }\n\n    return this._add({patch: {id: patchOrDocumentId, ...patchOps}})\n  }\n}\n\n/** @public */\nexport class ObservableTransaction extends BaseTransaction {\n  #client?: ObservableSanityClient\n  constructor(operations?: Mutation[], client?: ObservableSanityClient, transactionId?: string) {\n    super(operations, transactionId)\n    this.#client = client\n  }\n\n  /**\n   * Clones the transaction\n   */\n  clone(): ObservableTransaction {\n    return new ObservableTransaction([...this.operations], this.#client, this.trxId)\n  }\n\n  /**\n   * Commit the transaction, returning an observable that produces the first mutated document\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any>>(\n    options: TransactionFirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Commit the transaction, returning an observable that produces an array of the mutated documents\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit<R extends Record<string, Any>>(\n    options: TransactionAllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Commit the transaction, returning an observable that produces a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: TransactionFirstDocumentIdMutationOptions): Observable<SingleMutationResult>\n  /**\n   * Commit the transaction, returning an observable that produces a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options: TransactionAllDocumentIdsMutationOptions): Observable<MultipleMutationResult>\n  /**\n   * Commit the transaction, returning an observable that produces a mutation result object\n   *\n   * @param options - Options for the mutation operation\n   */\n  commit(options?: BaseMutationOptions): Observable<MultipleMutationResult>\n  commit<R extends Record<string, Any> = Record<string, Any>>(\n    options?:\n      | TransactionFirstDocumentMutationOptions\n      | TransactionAllDocumentsMutationOptions\n      | TransactionFirstDocumentIdMutationOptions\n      | TransactionAllDocumentIdsMutationOptions\n      | BaseMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    if (!this.#client) {\n      throw new Error(\n        'No `client` passed to transaction, either provide one or pass the ' +\n          'transaction to a clients `mutate()` method'\n      )\n    }\n\n    return this.#client.mutate<R>(\n      this.serialize() as Any,\n      Object.assign({transactionId: this.trxId}, defaultMutateOptions, options || {})\n    )\n  }\n\n  /**\n   * Performs a patch on the given document ID. Can either be a builder function or an object of patch operations.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to perform the patch operation on\n   * @param patchOps - Operations to perform, or a builder function\n   */\n  patch(documentId: string, patchOps?: ObservablePatchBuilder | PatchOperations): this\n  /**\n   * Adds the given patch instance to the transaction.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param patch - ObservablePatch to execute\n   */\n  patch(patch: ObservablePatch): this\n  patch(\n    patchOrDocumentId: ObservablePatch | string,\n    patchOps?: ObservablePatchBuilder | PatchOperations\n  ): this {\n    const isBuilder = typeof patchOps === 'function'\n    const isPatch =\n      typeof patchOrDocumentId !== 'string' && patchOrDocumentId instanceof ObservablePatch\n\n    // transaction.patch(client.patch('documentId').inc({visits: 1}))\n    if (isPatch) {\n      return this._add({patch: patchOrDocumentId.serialize()})\n    }\n\n    // patch => patch.inc({visits: 1}).set({foo: 'bar'})\n    if (isBuilder) {\n      const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, this.#client))\n      if (!(patch instanceof ObservablePatch)) {\n        throw new Error('function passed to `patch()` must return the patch')\n      }\n\n      return this._add({patch: patch.serialize()})\n    }\n\n    return this._add({patch: {id: patchOrDocumentId, ...patchOps}})\n  }\n}\n","import {type MonoTypeOperatorFunction, Observable} from 'rxjs'\nimport {filter, map} from 'rxjs/operators'\n\nimport {requestOptions} from '../http/requestOptions'\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {\n  AllDocumentIdsMutationOptions,\n  AllDocumentsMutationOptions,\n  Any,\n  BaseMutationOptions,\n  FilteredResponseQueryOptions,\n  FirstDocumentIdMutationOptions,\n  FirstDocumentMutationOptions,\n  HttpRequest,\n  HttpRequestEvent,\n  IdentifiedSanityDocumentStub,\n  MultipleMutationResult,\n  Mutation,\n  MutationSelection,\n  QueryParams,\n  RawQueryResponse,\n  RequestObservableOptions,\n  RequestOptions,\n  SanityDocument,\n  SingleMutationResult,\n  UnfilteredResponseQueryOptions,\n} from '../types'\nimport {getSelection} from '../util/getSelection'\nimport * as validate from '../validators'\nimport * as validators from '../validators'\nimport {encodeQueryString} from './encodeQueryString'\nimport {ObservablePatch, Patch} from './patch'\nimport {ObservableTransaction, Transaction} from './transaction'\n\nconst excludeFalsey = (param: Any, defValue: Any) => {\n  const value = typeof param === 'undefined' ? defValue : param\n  return param === false ? undefined : value\n}\n\nconst getMutationQuery = (options: BaseMutationOptions = {}) => {\n  return {\n    dryRun: options.dryRun,\n    returnIds: true,\n    returnDocuments: excludeFalsey(options.returnDocuments, true),\n    visibility: options.visibility || 'sync',\n    autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n    skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation,\n  }\n}\n\nconst isResponse = (event: Any) => event.type === 'response'\nconst getBody = (event: Any) => event.body\n\nconst indexBy = (docs: Any[], attr: Any) =>\n  docs.reduce((indexed, doc) => {\n    indexed[attr(doc)] = doc\n    return indexed\n  }, Object.create(null))\n\nconst getQuerySizeLimit = 11264\n\n/** @internal */\nexport function _fetch<R, Q extends QueryParams>(\n  client: ObservableSanityClient | SanityClient,\n  httpRequest: HttpRequest,\n  query: string,\n  params?: Q,\n  options: FilteredResponseQueryOptions | UnfilteredResponseQueryOptions = {}\n): Observable<RawQueryResponse<R> | R> {\n  const mapResponse =\n    options.filterResponse === false ? (res: Any) => res : (res: Any) => res.result\n\n  return _dataRequest(client, httpRequest, 'query', {query, params}, options).pipe(map(mapResponse))\n}\n\n/** @internal */\nexport function _getDocument<R extends Record<string, Any>>(\n  client: ObservableSanityClient | SanityClient,\n  httpRequest: HttpRequest,\n  id: string,\n  opts: {tag?: string} = {}\n): Observable<SanityDocument<R> | undefined> {\n  const options = {uri: _getDataUrl(client, 'doc', id), json: true, tag: opts.tag}\n  return _requestObservable<SanityDocument<R> | undefined>(client, httpRequest, options).pipe(\n    filter(isResponse),\n    map((event) => event.body.documents && event.body.documents[0])\n  )\n}\n\n/** @internal */\nexport function _getDocuments<R extends Record<string, Any>>(\n  client: ObservableSanityClient | SanityClient,\n  httpRequest: HttpRequest,\n  ids: string[],\n  opts: {tag?: string} = {}\n): Observable<(SanityDocument<R> | null)[]> {\n  const options = {uri: _getDataUrl(client, 'doc', ids.join(',')), json: true, tag: opts.tag}\n  return _requestObservable<(SanityDocument<R> | null)[]>(client, httpRequest, options).pipe(\n    filter(isResponse),\n    map((event: Any) => {\n      const indexed = indexBy(event.body.documents || [], (doc: Any) => doc._id)\n      return ids.map((id) => indexed[id] || null)\n    })\n  )\n}\n\n/** @internal */\nexport function _createIfNotExists<R extends Record<string, Any>>(\n  client: ObservableSanityClient | SanityClient,\n  httpRequest: HttpRequest,\n  doc: IdentifiedSanityDocumentStub<R>,\n  options?:\n    | AllDocumentIdsMutationOptions\n    | AllDocumentsMutationOptions\n    | BaseMutationOptions\n    | FirstDocumentIdMutationOptions\n    | FirstDocumentMutationOptions\n): Observable<\n  SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n> {\n  validators.requireDocumentId('createIfNotExists', doc)\n  return _create<R>(client, httpRequest, doc, 'createIfNotExists', options)\n}\n\n/** @internal */\nexport function _createOrReplace<R extends Record<string, Any>>(\n  client: ObservableSanityClient | SanityClient,\n  httpRequest: HttpRequest,\n  doc: IdentifiedSanityDocumentStub<R>,\n  options?:\n    | AllDocumentIdsMutationOptions\n    | AllDocumentsMutationOptions\n    | BaseMutationOptions\n    | FirstDocumentIdMutationOptions\n    | FirstDocumentMutationOptions\n): Observable<\n  SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n> {\n  validators.requireDocumentId('createOrReplace', doc)\n  return _create<R>(client, httpRequest, doc, 'createOrReplace', options)\n}\n\n/** @internal */\nexport function _delete<R extends Record<string, Any>>(\n  client: ObservableSanityClient | SanityClient,\n  httpRequest: HttpRequest,\n  selection: string | MutationSelection,\n  options?:\n    | AllDocumentIdsMutationOptions\n    | AllDocumentsMutationOptions\n    | BaseMutationOptions\n    | FirstDocumentIdMutationOptions\n    | FirstDocumentMutationOptions\n): Observable<\n  SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n> {\n  return _dataRequest(\n    client,\n    httpRequest,\n    'mutate',\n    {mutations: [{delete: getSelection(selection)}]},\n    options\n  )\n}\n\n/** @internal */\nexport function _mutate<R extends Record<string, Any>>(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  mutations: Mutation<R>[] | Patch | ObservablePatch | Transaction | ObservableTransaction,\n  options?:\n    | AllDocumentIdsMutationOptions\n    | AllDocumentsMutationOptions\n    | BaseMutationOptions\n    | FirstDocumentIdMutationOptions\n    | FirstDocumentMutationOptions\n): Observable<\n  SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n> {\n  let mut: Mutation | Mutation[]\n  if (mutations instanceof Patch || mutations instanceof ObservablePatch) {\n    mut = {patch: mutations.serialize()}\n  } else if (mutations instanceof Transaction || mutations instanceof ObservableTransaction) {\n    mut = mutations.serialize()\n  } else {\n    mut = mutations\n  }\n\n  const muts = Array.isArray(mut) ? mut : [mut]\n  const transactionId = (options && options.transactionId) || undefined\n  return _dataRequest(client, httpRequest, 'mutate', {mutations: muts, transactionId}, options)\n}\n\n/**\n * @internal\n */\nexport function _dataRequest(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  endpoint: string,\n  body: Any,\n  options: Any = {}\n): Any {\n  const isMutation = endpoint === 'mutate'\n  const isQuery = endpoint === 'query'\n\n  // Check if the query string is within a configured threshold,\n  // in which case we can use GET. Otherwise, use POST.\n  const strQuery = isMutation ? '' : encodeQueryString(body)\n  const useGet = !isMutation && strQuery.length < getQuerySizeLimit\n  const stringQuery = useGet ? strQuery : ''\n  const returnFirst = options.returnFirst\n  const {timeout, token, tag, headers} = options\n\n  const uri = _getDataUrl(client, endpoint, stringQuery)\n\n  const reqOptions = {\n    method: useGet ? 'GET' : 'POST',\n    uri: uri,\n    json: true,\n    body: useGet ? undefined : body,\n    query: isMutation && getMutationQuery(options),\n    timeout,\n    headers,\n    token,\n    tag,\n    canUseCdn: isQuery,\n    signal: options.signal,\n  }\n\n  return _requestObservable(client, httpRequest, reqOptions).pipe(\n    filter(isResponse),\n    map(getBody),\n    map((res) => {\n      if (!isMutation) {\n        return res\n      }\n\n      // Should we return documents?\n      const results = res.results || []\n      if (options.returnDocuments) {\n        return returnFirst\n          ? results[0] && results[0].document\n          : results.map((mut: Any) => mut.document)\n      }\n\n      // Return a reduced subset\n      const key = returnFirst ? 'documentId' : 'documentIds'\n      const ids = returnFirst ? results[0] && results[0].id : results.map((mut: Any) => mut.id)\n      return {\n        transactionId: res.transactionId,\n        results: results,\n        [key]: ids,\n      }\n    })\n  )\n}\n\n/**\n * @internal\n */\nexport function _create<R extends Record<string, Any>>(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  doc: Any,\n  op: Any,\n  options: Any = {}\n): Observable<\n  SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n> {\n  const mutation = {[op]: doc}\n  const opts = Object.assign({returnFirst: true, returnDocuments: true}, options)\n  return _dataRequest(client, httpRequest, 'mutate', {mutations: [mutation]}, opts)\n}\n\n/**\n * @internal\n */\nexport function _requestObservable<R>(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  options: RequestObservableOptions\n): Observable<HttpRequestEvent<R>> {\n  const uri = options.url || (options.uri as string)\n  const config = client.config()\n\n  // If the `canUseCdn`-option is not set we detect it automatically based on the method + URL.\n  // Only the /data endpoint is currently available through API-CDN.\n  const canUseCdn =\n    typeof options.canUseCdn === 'undefined'\n      ? ['GET', 'HEAD'].indexOf(options.method || 'GET') >= 0 && uri.indexOf('/data/') === 0\n      : options.canUseCdn\n\n  const useCdn = config.useCdn && canUseCdn\n\n  const tag =\n    options.tag && config.requestTagPrefix\n      ? [config.requestTagPrefix, options.tag].join('.')\n      : options.tag || config.requestTagPrefix\n\n  if (tag) {\n    options.query = {tag: validate.requestTag(tag), ...options.query}\n  }\n\n  const reqOptions = requestOptions(\n    config,\n    Object.assign({}, options, {\n      url: _getUrl(client, uri, useCdn),\n    })\n  ) as RequestOptions\n\n  const request = new Observable<HttpRequestEvent<R>>((subscriber) =>\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- the typings thinks it's optional because it's not required to specify it when calling createClient, but it's always defined in practice since SanityClient provides a default\n    httpRequest(reqOptions, config.requester!).subscribe(subscriber)\n  )\n\n  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request\n}\n\n/**\n * @internal\n */\nexport function _request<R>(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  options: Any\n): Observable<R> {\n  const observable = _requestObservable<R>(client, httpRequest, options).pipe(\n    filter((event: Any) => event.type === 'response'),\n    map((event: Any) => event.body)\n  )\n\n  return observable\n}\n\n/**\n * @internal\n */\nexport function _getDataUrl(\n  client: SanityClient | ObservableSanityClient,\n  operation: string,\n  path?: string\n): string {\n  const config = client.config()\n  const catalog = validators.hasDataset(config)\n  const baseUri = `/${operation}/${catalog}`\n  const uri = path ? `${baseUri}/${path}` : baseUri\n  return `/data${uri}`.replace(/\\/($|\\?)/, '$1')\n}\n\n/**\n * @internal\n */\nexport function _getUrl(\n  client: SanityClient | ObservableSanityClient,\n  uri: string,\n  canUseCdn = false\n): string {\n  const {url, cdnUrl} = client.config()\n  const base = canUseCdn ? cdnUrl : url\n  return `${base}/${uri.replace(/^\\//, '')}`\n}\n\n/**\n * @internal\n */\nfunction _withAbortSignal<T>(signal: AbortSignal): MonoTypeOperatorFunction<T> {\n  return (input) => {\n    return new Observable((observer) => {\n      const abort = () => observer.error(_createAbortError(signal))\n\n      if (signal && signal.aborted) {\n        abort()\n        return\n      }\n      const subscription = input.subscribe(observer)\n      signal.addEventListener('abort', abort)\n      return () => {\n        signal.removeEventListener('abort', abort)\n        subscription.unsubscribe()\n      }\n    })\n  }\n}\n// DOMException is supported on most modern browsers and Node.js 18+.\n// @see https://developer.mozilla.org/en-US/docs/Web/API/DOMException#browser_compatibility\nconst isDomExceptionSupported = Boolean(globalThis.DOMException)\n\n/**\n * @internal\n * @param signal\n * Original source copied from https://github.com/sindresorhus/ky/blob/740732c78aad97e9aec199e9871bdbf0ae29b805/source/errors/DOMException.ts\n * TODO: When targeting Node.js 18, use `signal.throwIfAborted()` (https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted)\n */\nfunction _createAbortError(signal?: AbortSignal) {\n  /*\n  NOTE: Use DomException with AbortError name as specified in MDN docs (https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort)\n  > When abort() is called, the fetch() promise rejects with an Error of type DOMException, with name AbortError.\n  */\n  if (isDomExceptionSupported) {\n    return new DOMException(signal?.reason ?? 'The operation was aborted.', 'AbortError')\n  }\n\n  // DOMException not supported. Fall back to use of error and override name.\n  const error = new Error(signal?.reason ?? 'The operation was aborted.')\n  error.name = 'AbortError'\n\n  return error\n}\n","import {lastValueFrom, type Observable} from 'rxjs'\nimport {filter, map} from 'rxjs/operators'\n\nimport {_requestObservable} from '../data/dataMethods'\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {\n  Any,\n  HttpRequest,\n  HttpRequestEvent,\n  ResponseEvent,\n  SanityAssetDocument,\n  SanityImageAssetDocument,\n  UploadBody,\n  UploadClientConfig,\n} from '../types'\nimport * as validators from '../validators'\n\n/** @internal */\nexport class ObservableAssetsClient {\n  #client: ObservableSanityClient\n  #httpRequest: HttpRequest\n  constructor(client: ObservableSanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Uploads a file asset to the configured dataset\n   *\n   * @param assetType - Asset type (file)\n   * @param body - Asset content - can be a browser File instance, a Blob, a Node.js Buffer instance or a Node.js ReadableStream.\n   * @param options - Options to use for the upload\n   */\n  upload(\n    assetType: 'file',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Observable<HttpRequestEvent<{document: SanityAssetDocument}>>\n\n  /**\n   * Uploads an image asset to the configured dataset\n   *\n   * @param assetType - Asset type (image)\n   * @param body - Asset content - can be a browser File instance, a Blob, a Node.js Buffer instance or a Node.js ReadableStream.\n   * @param options - Options to use for the upload\n   */\n  upload(\n    assetType: 'image',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Observable<HttpRequestEvent<{document: SanityImageAssetDocument}>>\n  /**\n   * Uploads a file or an image asset to the configured dataset\n   *\n   * @param assetType - Asset type (file/image)\n   * @param body - Asset content - can be a browser File instance, a Blob, a Node.js Buffer instance or a Node.js ReadableStream.\n   * @param options - Options to use for the upload\n   */\n  upload(\n    assetType: 'file' | 'image',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Observable<HttpRequestEvent<{document: SanityAssetDocument | SanityImageAssetDocument}>>\n  upload(\n    assetType: 'file' | 'image',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Observable<HttpRequestEvent<{document: SanityAssetDocument | SanityImageAssetDocument}>> {\n    return _upload(this.#client, this.#httpRequest, assetType, body, options)\n  }\n}\n\n/** @internal */\nexport class AssetsClient {\n  #client: SanityClient\n  #httpRequest: HttpRequest\n  constructor(client: SanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Uploads a file asset to the configured dataset\n   *\n   * @param assetType - Asset type (file)\n   * @param body - Asset content - can be a browser File instance, a Blob, a Node.js Buffer instance or a Node.js ReadableStream.\n   * @param options - Options to use for the upload\n   */\n  upload(\n    assetType: 'file',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Promise<SanityAssetDocument>\n  /**\n   * Uploads an image asset to the configured dataset\n   *\n   * @param assetType - Asset type (image)\n   * @param body - Asset content - can be a browser File instance, a Blob, a Node.js Buffer instance or a Node.js ReadableStream.\n   * @param options - Options to use for the upload\n   */\n  upload(\n    assetType: 'image',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Promise<SanityImageAssetDocument>\n  /**\n   * Uploads a file or an image asset to the configured dataset\n   *\n   * @param assetType - Asset type (file/image)\n   * @param body - Asset content - can be a browser File instance, a Blob, a Node.js Buffer instance or a Node.js ReadableStream.\n   * @param options - Options to use for the upload\n   */\n  upload(\n    assetType: 'file' | 'image',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Promise<SanityAssetDocument | SanityImageAssetDocument>\n  upload(\n    assetType: 'file' | 'image',\n    body: UploadBody,\n    options?: UploadClientConfig\n  ): Promise<SanityAssetDocument | SanityImageAssetDocument> {\n    const observable = _upload(this.#client, this.#httpRequest, assetType, body, options)\n    return lastValueFrom(\n      observable.pipe(\n        filter((event: Any) => event.type === 'response'),\n        map(\n          (event) =>\n            (event as ResponseEvent<{document: SanityAssetDocument | SanityImageAssetDocument}>)\n              .body.document\n        )\n      )\n    )\n  }\n}\n\nfunction _upload(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  assetType: 'image' | 'file',\n  body: UploadBody,\n  opts: UploadClientConfig = {}\n): Observable<HttpRequestEvent<{document: SanityAssetDocument | SanityImageAssetDocument}>> {\n  validators.validateAssetType(assetType)\n\n  // If an empty array is given, explicitly set `none` to override API defaults\n  let meta = opts.extract || undefined\n  if (meta && !meta.length) {\n    meta = ['none']\n  }\n\n  const dataset = validators.hasDataset(client.config())\n  const assetEndpoint = assetType === 'image' ? 'images' : 'files'\n  const options = optionsFromFile(opts, body)\n  const {tag, label, title, description, creditLine, filename, source} = options\n  const query: Any = {\n    label,\n    title,\n    description,\n    filename,\n    meta,\n    creditLine,\n  }\n  if (source) {\n    query.sourceId = source.id\n    query.sourceName = source.name\n    query.sourceUrl = source.url\n  }\n  return _requestObservable(client, httpRequest, {\n    tag,\n    method: 'POST',\n    timeout: options.timeout || 0,\n    uri: `/assets/${assetEndpoint}/${dataset}`,\n    headers: options.contentType ? {'Content-Type': options.contentType} : {},\n    query,\n    body,\n  })\n}\n\nfunction optionsFromFile(opts: Record<string, Any>, file: Any) {\n  if (typeof File === 'undefined' || !(file instanceof File)) {\n    return opts\n  }\n\n  return Object.assign(\n    {\n      filename: opts.preserveFilename === false ? undefined : file.name,\n      contentType: file.type,\n    },\n    opts\n  )\n}\n","const BASE_URL = 'https://www.sanity.io/help/'\n\nexport function generateHelpUrl(slug: string) {\n  return BASE_URL + slug\n}\n","import type {Any} from '../types'\n\nexport function once(fn: Any) {\n  let didCall = false\n  let returnValue: Any\n  return (...args: Any[]) => {\n    if (didCall) {\n      return returnValue\n    }\n    returnValue = fn(...args)\n    didCall = true\n    return returnValue\n  }\n}\n","import {generateHelpUrl} from './generateHelpUrl'\nimport {Any} from './types'\nimport {once} from './util/once'\n\nconst createWarningPrinter = (message: string[]) =>\n  // eslint-disable-next-line no-console\n  once((...args: Any[]) => console.warn(message.join(' '), ...args))\n\nexport const printCdnWarning = createWarningPrinter([\n  'You are not using the Sanity CDN. That means your data is always fresh, but the CDN is faster and',\n  `cheaper. Think about it! For more info, see ${generateHelpUrl('js-client-cdn-configuration')} `,\n  'To hide this warning, please set the `useCdn` option to either `true` or `false` when creating',\n  'the client.',\n])\n\nexport const printBrowserTokenWarning = createWarningPrinter([\n  'You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.',\n  `See ${generateHelpUrl(\n    'js-client-browser-token'\n  )} for more information and how to hide this warning.`,\n])\n\nexport const printNoApiVersionSpecifiedWarning = createWarningPrinter([\n  'Using the Sanity client without specifying an API version is deprecated.',\n  `See ${generateHelpUrl('js-client-api-version')}`,\n])\n\nexport const printNoDefaultExport = createWarningPrinter([\n  'The default export of @sanity/client has been deprecated. Use the named export `createClient` instead',\n])\n","import {generateHelpUrl} from './generateHelpUrl'\nimport type {ClientConfig, InitializedClientConfig} from './types'\nimport * as validate from './validators'\nimport * as warnings from './warnings'\n\nconst defaultCdnHost = 'apicdn.sanity.io'\nexport const defaultConfig = {\n  apiHost: 'https://api.sanity.io',\n  apiVersion: '1',\n  useProjectHostname: true,\n} satisfies ClientConfig\n\nconst LOCALHOSTS = ['localhost', '127.0.0.1', '0.0.0.0']\nconst isLocal = (host: string) => LOCALHOSTS.indexOf(host) !== -1\n\nexport const validateApiVersion = function validateApiVersion(apiVersion: string) {\n  if (apiVersion === '1' || apiVersion === 'X') {\n    return\n  }\n\n  const apiDate = new Date(apiVersion)\n  const apiVersionValid =\n    /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0\n\n  if (!apiVersionValid) {\n    throw new Error('Invalid API version string, expected `1` or date in format `YYYY-MM-DD`')\n  }\n}\n\nexport const initConfig = (\n  config: Partial<ClientConfig>,\n  prevConfig: Partial<ClientConfig>\n): InitializedClientConfig => {\n  const specifiedConfig = Object.assign({}, prevConfig, config)\n  if (!specifiedConfig.apiVersion) {\n    warnings.printNoApiVersionSpecifiedWarning()\n  }\n\n  const newConfig = Object.assign({} as InitializedClientConfig, defaultConfig, specifiedConfig)\n  const projectBased = newConfig.useProjectHostname\n\n  if (typeof Promise === 'undefined') {\n    const helpUrl = generateHelpUrl('js-client-promise-polyfill')\n    throw new Error(`No native Promise-implementation found, polyfill needed - see ${helpUrl}`)\n  }\n\n  if (projectBased && !newConfig.projectId) {\n    throw new Error('Configuration must contain `projectId`')\n  }\n\n  const isBrowser = typeof window !== 'undefined' && window.location && window.location.hostname\n  const isLocalhost = isBrowser && isLocal(window.location.hostname)\n\n  if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {\n    warnings.printBrowserTokenWarning()\n  } else if (typeof newConfig.useCdn === 'undefined') {\n    warnings.printCdnWarning()\n  }\n\n  if (projectBased) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- the nullability here is wrong, as line 48 throws an error if it's undefined\n    validate.projectId(newConfig.projectId!)\n  }\n\n  if (newConfig.dataset) {\n    validate.dataset(newConfig.dataset)\n  }\n\n  if ('requestTagPrefix' in newConfig) {\n    // Allow setting and unsetting request tag prefix\n    newConfig.requestTagPrefix = newConfig.requestTagPrefix\n      ? validate.requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, '')\n      : undefined\n  }\n\n  newConfig.apiVersion = `${newConfig.apiVersion}`.replace(/^v/, '')\n  newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost\n  newConfig.useCdn = Boolean(newConfig.useCdn) && !newConfig.withCredentials\n\n  validateApiVersion(newConfig.apiVersion)\n\n  const hostParts = newConfig.apiHost.split('://', 2)\n  const protocol = hostParts[0]\n  const host = hostParts[1]\n  const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host\n\n  if (newConfig.useProjectHostname) {\n    newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v${newConfig.apiVersion}`\n    newConfig.cdnUrl = `${protocol}://${newConfig.projectId}.${cdnHost}/v${newConfig.apiVersion}`\n  } else {\n    newConfig.url = `${newConfig.apiHost}/v${newConfig.apiVersion}`\n    newConfig.cdnUrl = newConfig.url\n  }\n\n  return newConfig\n}\n","import type {Any} from '../types'\n\nexport default (obj: Any, defaults: Any) =>\n  Object.keys(defaults)\n    .concat(Object.keys(obj))\n    .reduce((target, prop) => {\n      target[prop] = typeof obj[prop] === 'undefined' ? defaults[prop] : obj[prop]\n\n      return target\n    }, {} as Any)\n","import {Any} from '../types'\n\nexport const pick = (obj: Any, props: Any) =>\n  props.reduce((selection: Any, prop: Any) => {\n    if (typeof obj[prop] === 'undefined') {\n      return selection\n    }\n\n    selection[prop] = obj[prop]\n    return selection\n  }, {})\n","import {Observable} from 'rxjs'\n\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {Any, ListenEvent, ListenOptions, MutationEvent, QueryParams} from '../types'\nimport defaults from '../util/defaults'\nimport {pick} from '../util/pick'\nimport {_getDataUrl} from './dataMethods'\nimport {encodeQueryString} from './encodeQueryString'\n\n// Limit is 16K for a _request_, eg including headers. Have to account for an\n// unknown range of headers, but an average EventSource request from Chrome seems\n// to have around 700 bytes of cruft, so let us account for 1.2K to be \"safe\"\nconst MAX_URL_LENGTH = 16000 - 1200\n\nconst possibleOptions = [\n  'includePreviousRevision',\n  'includeResult',\n  'visibility',\n  'effectFormat',\n  'tag',\n]\n\nconst defaultOptions = {\n  includeResult: true,\n}\n\n/**\n * Set up a listener that will be notified when mutations occur on documents matching the provided query/filter.\n *\n * @param query - GROQ-filter to listen to changes for\n * @param params - Optional query parameters\n * @param options - Listener options\n * @internal\n */\nexport function _listen<R extends Record<string, Any> = Record<string, Any>>(\n  this: SanityClient | ObservableSanityClient,\n  query: string,\n  params?: QueryParams\n): Observable<MutationEvent<R>>\n/**\n * Set up a listener that will be notified when mutations occur on documents matching the provided query/filter.\n *\n * @param query - GROQ-filter to listen to changes for\n * @param params - Optional query parameters\n * @param options - Listener options\n * @internal\n */\nexport function _listen<R extends Record<string, Any> = Record<string, Any>>(\n  this: SanityClient | ObservableSanityClient,\n  query: string,\n  params?: QueryParams,\n  options?: ListenOptions\n): Observable<ListenEvent<R>>\n/** @internal */\nexport function _listen<R extends Record<string, Any> = Record<string, Any>>(\n  this: SanityClient | ObservableSanityClient,\n  query: string,\n  params?: QueryParams,\n  opts: ListenOptions = {}\n): Observable<MutationEvent<R> | ListenEvent<R>> {\n  const {url, token, withCredentials, requestTagPrefix} = this.config()\n  const tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join('.') : opts.tag\n  const options = {...defaults(opts, defaultOptions), tag}\n  const listenOpts = pick(options, possibleOptions)\n  const qs = encodeQueryString({query, params, options: {tag, ...listenOpts}})\n\n  const uri = `${url}${_getDataUrl(this, 'listen', qs)}`\n  if (uri.length > MAX_URL_LENGTH) {\n    return new Observable((observer) => observer.error(new Error('Query too large for listener')))\n  }\n\n  const listenFor = options.events ? options.events : ['mutation']\n  const shouldEmitReconnect = listenFor.indexOf('reconnect') !== -1\n\n  const esOptions: EventSourceInit & {headers?: Record<string, string>} = {}\n  if (token || withCredentials) {\n    esOptions.withCredentials = true\n  }\n\n  if (token) {\n    esOptions.headers = {\n      Authorization: `Bearer ${token}`,\n    }\n  }\n\n  return new Observable((observer) => {\n    let es: InstanceType<typeof import('@sanity/eventsource')>\n    getEventSource()\n      .then((eventSource) => {\n        es = eventSource\n      })\n      .catch((reason) => {\n        observer.error(reason)\n        stop()\n      })\n    let reconnectTimer: NodeJS.Timeout\n    let stopped = false\n\n    function onError() {\n      if (stopped) {\n        return\n      }\n\n      emitReconnect()\n\n      // Allow event handlers of `emitReconnect` to cancel/close the reconnect attempt\n      if (stopped) {\n        return\n      }\n\n      // Unless we've explicitly stopped the ES (in which case `stopped` should be true),\n      // we should never be in a disconnected state. By default, EventSource will reconnect\n      // automatically, in which case it sets readyState to `CONNECTING`, but in some cases\n      // (like when a laptop lid is closed), it closes the connection. In these cases we need\n      // to explicitly reconnect.\n      if (es.readyState === es.CLOSED) {\n        unsubscribe()\n        clearTimeout(reconnectTimer)\n        reconnectTimer = setTimeout(open, 100)\n      }\n    }\n\n    function onChannelError(err: Any) {\n      observer.error(cooerceError(err))\n    }\n\n    function onMessage(evt: Any) {\n      const event = parseEvent(evt)\n      return event instanceof Error ? observer.error(event) : observer.next(event)\n    }\n\n    function onDisconnect() {\n      stopped = true\n      unsubscribe()\n      observer.complete()\n    }\n\n    function unsubscribe() {\n      if (!es) return\n      es.removeEventListener('error', onError)\n      es.removeEventListener('channelError', onChannelError)\n      es.removeEventListener('disconnect', onDisconnect)\n      listenFor.forEach((type: string) => es.removeEventListener(type, onMessage))\n      es.close()\n    }\n\n    function emitReconnect() {\n      if (shouldEmitReconnect) {\n        observer.next({type: 'reconnect'})\n      }\n    }\n\n    async function getEventSource(): Promise<InstanceType<typeof import('@sanity/eventsource')>> {\n      const {default: EventSource} = await import('@sanity/eventsource')\n      const evs = new EventSource(uri, esOptions)\n      evs.addEventListener('error', onError)\n      evs.addEventListener('channelError', onChannelError)\n      evs.addEventListener('disconnect', onDisconnect)\n      listenFor.forEach((type: string) => evs.addEventListener(type, onMessage))\n      return evs\n    }\n\n    function open() {\n      getEventSource()\n        .then((eventSource) => {\n          es = eventSource\n        })\n        .catch((reason) => {\n          observer.error(reason)\n          stop()\n        })\n    }\n\n    function stop() {\n      stopped = true\n      unsubscribe()\n    }\n\n    return stop\n  })\n}\n\nfunction parseEvent(event: Any) {\n  try {\n    const data = (event.data && JSON.parse(event.data)) || {}\n    return Object.assign({type: event.type}, data)\n  } catch (err) {\n    return err\n  }\n}\n\nfunction cooerceError(err: Any) {\n  if (err instanceof Error) {\n    return err\n  }\n\n  const evt = parseEvent(err)\n  return evt instanceof Error ? evt : new Error(extractErrorMessage(evt))\n}\n\nfunction extractErrorMessage(err: Any) {\n  if (!err.error) {\n    return err.message || 'Unknown listener error'\n  }\n\n  if (err.error.description) {\n    return err.error.description\n  }\n\n  return typeof err.error === 'string' ? err.error : JSON.stringify(err.error, null, 2)\n}\n","import {lastValueFrom, type Observable} from 'rxjs'\n\nimport {_request} from '../data/dataMethods'\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {DatasetAclMode, DatasetResponse, DatasetsResponse, HttpRequest} from '../types'\nimport * as validate from '../validators'\n\n/** @internal */\nexport class ObservableDatasetsClient {\n  #client: ObservableSanityClient\n  #httpRequest: HttpRequest\n  constructor(client: ObservableSanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name: string, options?: {aclMode?: DatasetAclMode}): Observable<DatasetResponse> {\n    return _modify<DatasetResponse>(this.#client, this.#httpRequest, 'PUT', name, options)\n  }\n\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name: string, options?: {aclMode?: DatasetAclMode}): Observable<DatasetResponse> {\n    return _modify<DatasetResponse>(this.#client, this.#httpRequest, 'PATCH', name, options)\n  }\n\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name: string): Observable<{deleted: true}> {\n    return _modify<{deleted: true}>(this.#client, this.#httpRequest, 'DELETE', name)\n  }\n\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list(): Observable<DatasetsResponse> {\n    return _request<DatasetsResponse>(this.#client, this.#httpRequest, {uri: '/datasets'})\n  }\n}\n\n/** @internal */\nexport class DatasetsClient {\n  #client: SanityClient\n  #httpRequest: HttpRequest\n  constructor(client: SanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name: string, options?: {aclMode?: DatasetAclMode}): Promise<DatasetResponse> {\n    return lastValueFrom(\n      _modify<DatasetResponse>(this.#client, this.#httpRequest, 'PUT', name, options)\n    )\n  }\n\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name: string, options?: {aclMode?: DatasetAclMode}): Promise<DatasetResponse> {\n    return lastValueFrom(\n      _modify<DatasetResponse>(this.#client, this.#httpRequest, 'PATCH', name, options)\n    )\n  }\n\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name: string): Promise<{deleted: true}> {\n    return lastValueFrom(_modify<{deleted: true}>(this.#client, this.#httpRequest, 'DELETE', name))\n  }\n\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list(): Promise<DatasetsResponse> {\n    return lastValueFrom(\n      _request<DatasetsResponse>(this.#client, this.#httpRequest, {uri: '/datasets'})\n    )\n  }\n}\n\nfunction _modify<R = unknown>(\n  client: SanityClient | ObservableSanityClient,\n  httpRequest: HttpRequest,\n  method: 'DELETE' | 'PATCH' | 'PUT',\n  name: string,\n  options?: {aclMode?: DatasetAclMode}\n) {\n  validate.dataset(name)\n  return _request<R>(client, httpRequest, {method, uri: `/datasets/${name}`, body: options})\n}\n","import {lastValueFrom, type Observable} from 'rxjs'\n\nimport {_request} from '../data/dataMethods'\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {HttpRequest, SanityProject} from '../types'\n\n/** @internal */\nexport class ObservableProjectsClient {\n  #client: ObservableSanityClient\n  #httpRequest: HttpRequest\n  constructor(client: ObservableSanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Fetch a list of projects the authenticated user has access to\n   */\n  list(): Observable<SanityProject[]> {\n    return _request<SanityProject[]>(this.#client, this.#httpRequest, {uri: '/projects'})\n  }\n\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId: string): Observable<SanityProject> {\n    return _request<SanityProject>(this.#client, this.#httpRequest, {uri: `/projects/${projectId}`})\n  }\n}\n\n/** @internal */\nexport class ProjectsClient {\n  #client: SanityClient\n  #httpRequest: HttpRequest\n  constructor(client: SanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Fetch a list of projects the authenticated user has access to\n   */\n  list(): Promise<SanityProject[]> {\n    return lastValueFrom(\n      _request<SanityProject[]>(this.#client, this.#httpRequest, {uri: '/projects'})\n    )\n  }\n\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId: string): Promise<SanityProject> {\n    return lastValueFrom(\n      _request<SanityProject>(this.#client, this.#httpRequest, {uri: `/projects/${projectId}`})\n    )\n  }\n}\n","import {lastValueFrom, type Observable} from 'rxjs'\n\nimport {_request} from '../data/dataMethods'\nimport type {ObservableSanityClient, SanityClient} from '../SanityClient'\nimport type {CurrentSanityUser, HttpRequest, SanityUser} from '../types'\n\n/** @public */\nexport class ObservableUsersClient {\n  #client: ObservableSanityClient\n  #httpRequest: HttpRequest\n  constructor(client: ObservableSanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById<T extends 'me' | string>(\n    id: T\n  ): Observable<T extends 'me' ? CurrentSanityUser : SanityUser> {\n    return _request<T extends 'me' ? CurrentSanityUser : SanityUser>(\n      this.#client,\n      this.#httpRequest,\n      {uri: `/users/${id}`}\n    )\n  }\n}\n\n/** @public */\nexport class UsersClient {\n  #client: SanityClient\n  #httpRequest: HttpRequest\n  constructor(client: SanityClient, httpRequest: HttpRequest) {\n    this.#client = client\n    this.#httpRequest = httpRequest\n  }\n\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById<T extends 'me' | string>(\n    id: T\n  ): Promise<T extends 'me' ? CurrentSanityUser : SanityUser> {\n    return lastValueFrom(\n      _request<T extends 'me' ? CurrentSanityUser : SanityUser>(this.#client, this.#httpRequest, {\n        uri: `/users/${id}`,\n      })\n    )\n  }\n}\n","import {lastValueFrom, Observable} from 'rxjs'\n\nimport {AssetsClient, ObservableAssetsClient} from './assets/AssetsClient'\nimport {defaultConfig, initConfig} from './config'\nimport * as dataMethods from './data/dataMethods'\nimport {_listen} from './data/listen'\nimport {ObservablePatch, Patch} from './data/patch'\nimport {ObservableTransaction, Transaction} from './data/transaction'\nimport {DatasetsClient, ObservableDatasetsClient} from './datasets/DatasetsClient'\nimport {ObservableProjectsClient, ProjectsClient} from './projects/ProjectsClient'\nimport type {\n  AllDocumentIdsMutationOptions,\n  AllDocumentsMutationOptions,\n  Any,\n  BaseMutationOptions,\n  ClientConfig,\n  FilteredResponseQueryOptions,\n  FirstDocumentIdMutationOptions,\n  FirstDocumentMutationOptions,\n  HttpRequest,\n  IdentifiedSanityDocumentStub,\n  InitializedClientConfig,\n  MultipleMutationResult,\n  Mutation,\n  MutationSelection,\n  PatchOperations,\n  PatchSelection,\n  QueryParams,\n  RawQueryResponse,\n  RawRequestOptions,\n  SanityDocument,\n  SanityDocumentStub,\n  SingleMutationResult,\n  UnfilteredResponseQueryOptions,\n} from './types'\nimport {ObservableUsersClient, UsersClient} from './users/UsersClient'\n\nexport type {\n  _listen,\n  AssetsClient,\n  DatasetsClient,\n  ObservableAssetsClient,\n  ObservableDatasetsClient,\n  ObservableProjectsClient,\n  ObservableUsersClient,\n  ProjectsClient,\n  UsersClient,\n}\n\n/** @public */\nexport class ObservableSanityClient {\n  assets: ObservableAssetsClient\n  datasets: ObservableDatasetsClient\n  projects: ObservableProjectsClient\n  users: ObservableUsersClient\n\n  /**\n   * Private properties\n   */\n  #clientConfig: InitializedClientConfig\n  #httpRequest: HttpRequest\n\n  /**\n   * Instance properties\n   */\n  listen = _listen\n\n  constructor(httpRequest: HttpRequest, config: ClientConfig = defaultConfig) {\n    this.config(config)\n\n    this.#httpRequest = httpRequest\n\n    this.assets = new ObservableAssetsClient(this, this.#httpRequest)\n    this.datasets = new ObservableDatasetsClient(this, this.#httpRequest)\n    this.projects = new ObservableProjectsClient(this, this.#httpRequest)\n    this.users = new ObservableUsersClient(this, this.#httpRequest)\n  }\n\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone(): ObservableSanityClient {\n    return new ObservableSanityClient(this.#httpRequest, this.config())\n  }\n\n  /**\n   * Returns the current client configuration\n   */\n  config(): InitializedClientConfig\n  /**\n   * Reconfigure the client. Note that this _mutates_ the current client.\n   */\n  config(newConfig?: Partial<ClientConfig>): this\n  config(newConfig?: Partial<ClientConfig>): ClientConfig | this {\n    if (newConfig === undefined) {\n      return {...this.#clientConfig}\n    }\n\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === false) {\n      throw new Error(\n        'Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client'\n      )\n    }\n\n    this.#clientConfig = initConfig(newConfig, this.#clientConfig || {})\n    return this\n  }\n\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig?: Partial<ClientConfig>): ObservableSanityClient {\n    return new ObservableSanityClient(this.#httpRequest, {...this.config(), ...newConfig})\n  }\n\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   */\n  fetch<R = Any>(query: string): Observable<R>\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   * @param params - Query parameters\n   */\n  fetch<R = Any, Q = QueryParams>(query: string, params: Q): Observable<R>\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   * @param params - Query parameters\n   * @param options - Request options\n   */\n  fetch<R = Any, Q = QueryParams>(\n    query: string,\n    params: Q | undefined,\n    options: FilteredResponseQueryOptions\n  ): Observable<R>\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   * @param params - Query parameters\n   * @param options - Request options\n   */\n  fetch<R = Any, Q = QueryParams>(\n    query: string,\n    params: Q | undefined,\n    options: UnfilteredResponseQueryOptions\n  ): Observable<RawQueryResponse<R>>\n  fetch<R, Q extends QueryParams>(\n    query: string,\n    params?: Q,\n    options: FilteredResponseQueryOptions | UnfilteredResponseQueryOptions = {}\n  ): Observable<RawQueryResponse<R> | R> {\n    return dataMethods._fetch<R, Q>(this, this.#httpRequest, query, params, options)\n  }\n\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options?: {tag?: string}\n  ): Observable<SanityDocument<R> | undefined> {\n    return dataMethods._getDocument<R>(this, this.#httpRequest, id, options)\n  }\n\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments<R extends Record<string, Any> = Record<string, Any>>(\n    ids: string[],\n    options?: {tag?: string}\n  ): Observable<(SanityDocument<R> | null)[]> {\n    return dataMethods._getDocuments<R>(this, this.#httpRequest, ids, options)\n  }\n\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns an observable that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns an observable that resolves to an array containing the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns an observable that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: FirstDocumentIdMutationOptions\n  ): Observable<SingleMutationResult>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns an observable that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: AllDocumentIdsMutationOptions\n  ): Observable<MultipleMutationResult>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns an observable that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return dataMethods._create<R>(this, this.#httpRequest, document, 'create', options)\n  }\n\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns an observable that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns an observable that resolves to an array containing the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns an observable that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentIdMutationOptions\n  ): Observable<SingleMutationResult>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns an observable that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentIdsMutationOptions\n  ): Observable<MultipleMutationResult>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns an observable that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return dataMethods._createIfNotExists<R>(this, this.#httpRequest, document, options)\n  }\n\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns an observable that resolves to the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns an observable that resolves to an array containing the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns an observable that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentIdMutationOptions\n  ): Observable<SingleMutationResult>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns an observable that resolves to a mutation result object containing the created document ID.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentIdsMutationOptions\n  ): Observable<MultipleMutationResult>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns an observable that resolves to the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return dataMethods._createOrReplace<R>(this, this.#httpRequest, document, options)\n  }\n\n  /**\n   * Deletes a document with the given document ID.\n   * Returns an observable that resolves to the deleted document.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns an observable that resolves to an array containing the deleted document.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns an observable that resolves to a mutation result object containing the deleted document ID.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete(id: string, options: FirstDocumentIdMutationOptions): Observable<SingleMutationResult>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns an observable that resolves to a mutation result object containing the deleted document ID.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete(id: string, options: AllDocumentIdsMutationOptions): Observable<MultipleMutationResult>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns an observable that resolves to the deleted document.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns an observable that resolves to first deleted document.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: MutationSelection,\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns an observable that resolves to an array containing the deleted documents.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: MutationSelection,\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns an observable that resolves to a mutation result object containing the ID of the first deleted document.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete(\n    selection: MutationSelection,\n    options: FirstDocumentIdMutationOptions\n  ): Observable<SingleMutationResult>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns an observable that resolves to a mutation result object containing the document IDs that were deleted.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete(\n    selection: MutationSelection,\n    options: AllDocumentIdsMutationOptions\n  ): Observable<MultipleMutationResult>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns an observable that resolves to first deleted document.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: MutationSelection,\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: string | MutationSelection,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return dataMethods._delete<R>(this, this.#httpRequest, selection, options)\n  }\n\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns an observable that resolves to the first mutated document.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | ObservablePatch | ObservableTransaction,\n    options: FirstDocumentMutationOptions\n  ): Observable<SanityDocument<R>>\n  /**\n   * Perform mutation operations against the configured dataset.\n   * Returns an observable that resolves to an array of the mutated documents.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | ObservablePatch | ObservableTransaction,\n    options: AllDocumentsMutationOptions\n  ): Observable<SanityDocument<R>[]>\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns an observable that resolves to a mutation result object containing the document ID of the first mutated document.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | ObservablePatch | ObservableTransaction,\n    options: FirstDocumentIdMutationOptions\n  ): Observable<SingleMutationResult>\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns an observable that resolves to a mutation result object containing the mutated document IDs.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | ObservablePatch | ObservableTransaction,\n    options: AllDocumentIdsMutationOptions\n  ): Observable<MultipleMutationResult>\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns an observable that resolves to the first mutated document.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | ObservablePatch | ObservableTransaction,\n    options?: BaseMutationOptions\n  ): Observable<SanityDocument<R>>\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | ObservablePatch | ObservableTransaction,\n    options?:\n      | FirstDocumentMutationOptions\n      | AllDocumentsMutationOptions\n      | FirstDocumentIdMutationOptions\n      | AllDocumentIdsMutationOptions\n      | BaseMutationOptions\n  ): Observable<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return dataMethods._mutate<R>(this, this.#httpRequest, operations, options)\n  }\n\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param documentId - Document ID(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   */\n  patch(documentId: PatchSelection, operations?: PatchOperations): ObservablePatch {\n    return new ObservablePatch(documentId, operations, this)\n  }\n\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction<R extends Record<string, Any> = Record<string, Any>>(\n    operations?: Mutation<R>[]\n  ): ObservableTransaction {\n    return new ObservableTransaction(operations, this)\n  }\n\n  /**\n   * DEPRECATED: Perform an HTTP request against the Sanity API\n   *\n   * @deprecated Use your own request library!\n   * @param options - Request options\n   */\n  request<R = Any>(options: RawRequestOptions): Observable<R> {\n    return dataMethods._request(this, this.#httpRequest, options)\n  }\n\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri: string, canUseCdn?: boolean): string {\n    return dataMethods._getUrl(this, uri, canUseCdn)\n  }\n\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation: string, path?: string): string {\n    return dataMethods._getDataUrl(this, operation, path)\n  }\n}\n\n/** @public */\nexport class SanityClient {\n  assets: AssetsClient\n  datasets: DatasetsClient\n  projects: ProjectsClient\n  users: UsersClient\n\n  /**\n   * Observable version of the Sanity client, with the same configuration as the promise-based one\n   */\n  observable: ObservableSanityClient\n\n  /**\n   * Private properties\n   */\n  #clientConfig: InitializedClientConfig\n  #httpRequest: HttpRequest\n\n  /**\n   * Instance properties\n   */\n  listen = _listen\n\n  constructor(httpRequest: HttpRequest, config: ClientConfig = defaultConfig) {\n    this.config(config)\n\n    this.#httpRequest = httpRequest\n\n    this.assets = new AssetsClient(this, this.#httpRequest)\n    this.datasets = new DatasetsClient(this, this.#httpRequest)\n    this.projects = new ProjectsClient(this, this.#httpRequest)\n    this.users = new UsersClient(this, this.#httpRequest)\n\n    this.observable = new ObservableSanityClient(httpRequest, config)\n  }\n\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone(): SanityClient {\n    return new SanityClient(this.#httpRequest, this.config())\n  }\n\n  /**\n   * Returns the current client configuration\n   */\n  config(): InitializedClientConfig\n  /**\n   * Reconfigure the client. Note that this _mutates_ the current client.\n   */\n  config(newConfig?: Partial<ClientConfig>): this\n  config(newConfig?: Partial<ClientConfig>): ClientConfig | this {\n    if (newConfig === undefined) {\n      return {...this.#clientConfig}\n    }\n\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === false) {\n      throw new Error(\n        'Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client'\n      )\n    }\n\n    if (this.observable) {\n      this.observable.config(newConfig)\n    }\n\n    this.#clientConfig = initConfig(newConfig, this.#clientConfig || {})\n    return this\n  }\n\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig?: Partial<ClientConfig>): SanityClient {\n    return new SanityClient(this.#httpRequest, {...this.config(), ...newConfig})\n  }\n\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   */\n  fetch<R = Any>(query: string): Promise<R>\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   * @param params - Optional query parameters\n   */\n  fetch<R = Any, Q = QueryParams>(query: string, params: Q): Promise<R>\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   * @param params - Optional query parameters\n   * @param options - Request options\n   */\n  fetch<R = Any, Q = QueryParams>(\n    query: string,\n    params: Q | undefined,\n    options: FilteredResponseQueryOptions\n  ): Promise<R>\n  /**\n   * Perform a GROQ-query against the configured dataset.\n   *\n   * @param query - GROQ-query to perform\n   * @param params - Optional query parameters\n   * @param options - Request options\n   */\n  fetch<R = Any, Q = QueryParams>(\n    query: string,\n    params: Q | undefined,\n    options: UnfilteredResponseQueryOptions\n  ): Promise<RawQueryResponse<R>>\n  fetch<R, Q extends QueryParams>(\n    query: string,\n    params?: Q,\n    options: FilteredResponseQueryOptions | UnfilteredResponseQueryOptions = {}\n  ): Promise<RawQueryResponse<R> | R> {\n    return lastValueFrom(dataMethods._fetch<R, Q>(this, this.#httpRequest, query, params, options))\n  }\n\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options?: {tag?: string}\n  ): Promise<SanityDocument<R> | undefined> {\n    return lastValueFrom(dataMethods._getDocument<R>(this, this.#httpRequest, id, options))\n  }\n\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments<R extends Record<string, Any> = Record<string, Any>>(\n    ids: string[],\n    options?: {tag?: string}\n  ): Promise<(SanityDocument<R> | null)[]> {\n    return lastValueFrom(dataMethods._getDocuments<R>(this, this.#httpRequest, ids, options))\n  }\n\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns a promise that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns a promise that resolves to an array containing the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns a promise that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: FirstDocumentIdMutationOptions\n  ): Promise<SingleMutationResult>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns a promise that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options: AllDocumentIdsMutationOptions\n  ): Promise<MultipleMutationResult>\n  /**\n   * Create a document. Requires a `_type` property. If no `_id` is provided, it will be generated by the database.\n   * Returns a promise that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  create<R extends Record<string, Any> = Record<string, Any>>(\n    document: SanityDocumentStub<R>,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return lastValueFrom(\n      dataMethods._create<R>(this, this.#httpRequest, document, 'create', options)\n    )\n  }\n\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns a promise that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns a promise that resolves to an array containing the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns a promise that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentIdMutationOptions\n  ): Promise<SingleMutationResult>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns a promise that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentIdsMutationOptions\n  ): Promise<MultipleMutationResult>\n  /**\n   * Create a document if no document with the same ID already exists.\n   * Returns a promise that resolves to the created document.\n   *\n   * @param document - Document to create\n   * @param options - Mutation options\n   */\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  createIfNotExists<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return lastValueFrom(\n      dataMethods._createIfNotExists<R>(this, this.#httpRequest, document, options)\n    )\n  }\n\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns a promise that resolves to the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns a promise that resolves to an array containing the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns a promise that resolves to a mutation result object containing the ID of the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: FirstDocumentIdMutationOptions\n  ): Promise<SingleMutationResult>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns a promise that resolves to a mutation result object containing the created document ID.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options: AllDocumentIdsMutationOptions\n  ): Promise<MultipleMutationResult>\n  /**\n   * Create a document if it does not exist, or replace a document with the same document ID\n   * Returns a promise that resolves to the created document.\n   *\n   * @param document - Document to either create or replace\n   * @param options - Mutation options\n   */\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  createOrReplace<R extends Record<string, Any> = Record<string, Any>>(\n    document: IdentifiedSanityDocumentStub<R>,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return lastValueFrom(\n      dataMethods._createOrReplace<R>(this, this.#httpRequest, document, options)\n    )\n  }\n\n  /**\n   * Deletes a document with the given document ID.\n   * Returns a promise that resolves to the deleted document.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns a promise that resolves to an array containing the deleted document.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns a promise that resolves to a mutation result object containing the deleted document ID.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete(id: string, options: FirstDocumentIdMutationOptions): Promise<SingleMutationResult>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns a promise that resolves to a mutation result object containing the deleted document ID.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete(id: string, options: AllDocumentIdsMutationOptions): Promise<MultipleMutationResult>\n  /**\n   * Deletes a document with the given document ID.\n   * Returns a promise that resolves to the deleted document.\n   *\n   * @param id - Document ID to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    id: string,\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns a promise that resolves to first deleted document.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: MutationSelection,\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns a promise that resolves to an array containing the deleted documents.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: MutationSelection,\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns a promise that resolves to a mutation result object containing the ID of the first deleted document.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete(\n    selection: MutationSelection,\n    options: FirstDocumentIdMutationOptions\n  ): Promise<SingleMutationResult>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns a promise that resolves to a mutation result object containing the document IDs that were deleted.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete(\n    selection: MutationSelection,\n    options: AllDocumentIdsMutationOptions\n  ): Promise<MultipleMutationResult>\n  /**\n   * Deletes one or more documents matching the given query or document ID.\n   * Returns a promise that resolves to first deleted document.\n   *\n   * @param selection - An object with either an `id` or `query` key defining what to delete\n   * @param options - Options for the mutation\n   */\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: MutationSelection,\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  delete<R extends Record<string, Any> = Record<string, Any>>(\n    selection: string | MutationSelection,\n    options?:\n      | AllDocumentIdsMutationOptions\n      | AllDocumentsMutationOptions\n      | BaseMutationOptions\n      | FirstDocumentIdMutationOptions\n      | FirstDocumentMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return lastValueFrom(dataMethods._delete<R>(this, this.#httpRequest, selection, options))\n  }\n\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns a promise that resolves to the first mutated document.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | Patch | Transaction,\n    options: FirstDocumentMutationOptions\n  ): Promise<SanityDocument<R>>\n  /**\n   * Perform mutation operations against the configured dataset.\n   * Returns a promise that resolves to an array of the mutated documents.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | Patch | Transaction,\n    options: AllDocumentsMutationOptions\n  ): Promise<SanityDocument<R>[]>\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns a promise that resolves to a mutation result object containing the document ID of the first mutated document.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | Patch | Transaction,\n    options: FirstDocumentIdMutationOptions\n  ): Promise<SingleMutationResult>\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns a promise that resolves to a mutation result object containing the mutated document IDs.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any>>(\n    operations: Mutation<R>[] | Patch | Transaction,\n    options: AllDocumentIdsMutationOptions\n  ): Promise<MultipleMutationResult>\n  /**\n   * Perform mutation operations against the configured dataset\n   * Returns a promise that resolves to the first mutated document.\n   *\n   * @param operations - Mutation operations to execute\n   * @param options - Mutation options\n   */\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | Patch | Transaction,\n    options?: BaseMutationOptions\n  ): Promise<SanityDocument<R>>\n  mutate<R extends Record<string, Any> = Record<string, Any>>(\n    operations: Mutation<R>[] | Patch | Transaction,\n    options?:\n      | FirstDocumentMutationOptions\n      | AllDocumentsMutationOptions\n      | FirstDocumentIdMutationOptions\n      | AllDocumentIdsMutationOptions\n      | BaseMutationOptions\n  ): Promise<\n    SanityDocument<R> | SanityDocument<R>[] | SingleMutationResult | MultipleMutationResult\n  > {\n    return lastValueFrom(dataMethods._mutate<R>(this, this.#httpRequest, operations, options))\n  }\n\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param documentId - Document ID(s)to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   */\n  patch(documentId: PatchSelection, operations?: PatchOperations): Patch {\n    return new Patch(documentId, operations, this)\n  }\n\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction<R extends Record<string, Any> = Record<string, Any>>(\n    operations?: Mutation<R>[]\n  ): Transaction {\n    return new Transaction(operations, this)\n  }\n\n  /**\n   * DEPRECATED: Perform an HTTP request against the Sanity API\n   *\n   * @deprecated Use your own request library!\n   * @param options - Request options\n   */\n  request<R = Any>(options: RawRequestOptions): Promise<R> {\n    return lastValueFrom(dataMethods._request<R>(this, this.#httpRequest, options))\n  }\n\n  /**\n   * DEPRECATED: Perform an HTTP request a `/data` sub-endpoint\n   *\n   * @deprecated Use your own request library!\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   */\n  dataRequest(endpoint: string, body: unknown, options?: BaseMutationOptions): Promise<Any> {\n    return lastValueFrom(dataMethods._dataRequest(this, this.#httpRequest, endpoint, body, options))\n  }\n\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri: string, canUseCdn?: boolean): string {\n    return dataMethods._getUrl(this, uri, canUseCdn)\n  }\n\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation: string, path?: string): string {\n    return dataMethods._getDataUrl(this, operation, path)\n  }\n}\n","import envMiddleware from './http/browserMiddleware'\nimport {defineHttpRequest} from './http/request'\nimport {SanityClient} from './SanityClient'\nimport type {ClientConfig} from './types'\nimport {printNoDefaultExport} from './warnings'\n\nexport * from './data/patch'\nexport * from './data/transaction'\nexport {ClientError, ServerError} from './http/errors'\nexport * from './SanityClient'\nexport * from './types'\n\n// Set the http client to use for requests, and its environment specific middleware\nconst httpRequest = defineHttpRequest(envMiddleware)\n/** @public */\nexport const requester = httpRequest.defaultRequester\n\n/** @public */\nexport const createClient = (config: ClientConfig) => new SanityClient(httpRequest, config)\n\n/**\n * @public\n * @deprecated Use the named export `createClient` instead of the `default` export\n */\nexport default function deprecatedCreateClient(config: ClientConfig) {\n  printNoDefaultExport()\n  return new SanityClient(httpRequest, config)\n}\n\n/** @alpha */\nexport {adapter as unstable__adapter, environment as unstable__environment} from 'get-it'\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}